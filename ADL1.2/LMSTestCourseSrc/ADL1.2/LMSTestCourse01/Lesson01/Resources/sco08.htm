<HTML>

<HEAD>
<META http-equiv="expires" CONTENT="Tue, 20 Aug 1999 01:00:00 GMT">
<META http-equiv="Pragma" CONTENT="no-cache">
<SCRIPT LANGUAGE=JAVASCRIPT>
<!--
/*******************************************************************************
** Filename:  SCO08.htm
**
** File Description: ADL SCORM Test Course I - SCO 08 - Tests the LMS's:
**
**
**
** Author: CTC ADL Project Team
**
** Contract Number:
** Company Name: CTC
**
** Module/Package Name:
** Module/Package Description:
**
** Design Issues:
** Implementation Issues:
**
** Known Problems:
** Side Effects:
**
** References:  ADL SCORM
**
**
/*******************************************************************************
**
** The Advanced Distributed Learning Co-Laboratory (ADL Co-Lab) grants you
** ("Licensee") a non-exclusive, royalty free, license to use, modify and
** redistribute this software in source and binary code form, provided that
** i) this copyright notice and license appear on all copies of the software;
** and ii) Licensee does not utilize the software in a manner which is
** disparaging to ADL Co-Lab.
**
** This software is provided "AS IS," without a warranty of any kind.  ALL
** EXPRESS OR IMPLIED CONDITIONS, REPRESENTATIONS AND WARRANTIES, INCLUDING ANY
** IMPLIED WARRANTY OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE OR NON-
** INFRINGEMENT, ARE HEREBY EXCLUDED.  ADL Co-Lab AND ITS LICENSORS SHALL NOT BE
** LIABLE FOR ANY DAMAGES SUFFERED BY LICENSEE AS A RESULT OF USING, MODIFYING
** OR DISTRIBUTING THE SOFTWARE OR ITS DERIVATIVES.  IN NO EVENT WILL ADL Co-Lab
** OR ITS LICENSORS BE LIABLE FOR ANY LOST REVENUE, PROFIT OR DATA, OR FOR
** DIRECT, INDIRECT, SPECIAL, CONSEQUENTIAL, INCIDENTAL OR PUNITIVE DAMAGES,
** HOWEVER CAUSED AND REGARDLESS OF THE THEORY OF LIABILITY, ARISING OUT OF THE
** USE OF OR INABILITY TO USE SOFTWARE, EVEN IF ADL Co-Lab  HAS BEEN ADVISED OF
** THE POSSIBILITY OF SUCH DAMAGES.
**
**
** Date Changed   Author            Reason for Changes
** ------------   ----------------  -------------------------------------------
** 11/27/2001     Jeff Falls        Corrected the reporting and tracking of
**                                  conformance labels
**
** 01/03/2002     Bill Capone       Modified an output message in the function
**                                  checkAllPossibleTimespans.
**
** 01/14/2002     Bill Capone       Modified many of the elements to be
**                                  compatible with LMS Requirements 1.2. See
**                                  Perfect Tracker 1491.  Removed the function
**                                  displayInfoTwoExpectedErrorCodes() as it's
**                                  no longer called.  Added the function
**                                  displayInfoAsWarning().
**
** 01/22/2002     Bill Capone       Changed the calls from doLMSGetValue to
**                                  apihandle.LMSGetValue.  Made this same
**                                  for LMSGetLastError and LMSSetValue.
**
** 03/13/2002     Bill Capone       PT#1818: Modified displayInfoNoError(),
**                                  displayInfoAsWarning() and
**                                  displayInfoForTypeChildren().  If receiving
**                                  a 401 or 201 error code on an optional
**                                  element display a Warning (system was
**                                  displaying an Error).
**
** 05/14/2002     Bill Capone       PT1912: Had to split
**                                  checkAllPossibleCMISInteger() into three
**                                  separate functions, one each for
**                                  cmi.student_preference: audio, speed & text.
**
** 05/15/2002     Bill Capone       PT1976: Modified the calls using invalid
**                                  data for cmi.interactions.n.
**                                  correct_responses.n.pattern and for
**                                  cmi.interactions.n.student_response: Changed
**                                  expected error code from _IncorrectDataType
**                                  to _InvalidArgumentError.  Also changed "||"
**                                  to "&&" on the last else if in
**                                  displayInfoAsWarning() and in
**                                  displayInfoForTypeChildren(). For
**                                  cmi.core._children, reversed the second
**                                  expected error code and the warning error
**                                  code.
**
** 05/15/2002     Bill Capone       PT1977: Modified checkAllPossibleTypes's
**                                  last valid set to type "fill-in".  This
**                                  function is used by cmi.interactions.0.type.
**                                  Change made to correspond with next valid
**                                  LMSSetValue for cmi.interactions.
**
**
** 06/21/2011	  Mayank Gupta	    Modified doTest function. For alert compatibility
**				    with Selenium WebDriver used in ADL 1.2
**				    Test Script.
*******************************************************************************/
--></SCRIPT>
<SCRIPT LANGUAGE=JAVASCRIPT SRC="lmsrtefunctions.js"></SCRIPT>
<SCRIPT LANGUAGE=JAVASCRIPT>

/*******************************************************************************
**
** Function loadThisPage()
** Inputs:  None
** Return:  None
**
** Description:
** Calls the intialize and doTest functions.
**
*******************************************************************************/
function loadThisPage()
{
   doLMSInitialize();
   doTest();

}

/*******************************************************************************
**
** Function doTest()
** Inputs:  None
** Return:  None
**
** Description:
** Calls testMandatory and testOptional which then test each and every Data
** Model element.
**
*******************************************************************************/
function doTest()
{
   testLaunch(1, 8);
   setAPIHandle(null);
   testMandatory();
   testOptional();

   doLMSSetValue("cmi.core.lesson_status", "completed");
   doLMSSetValue("cmi.core.exit", "" );
   doLMSSetValue("cmi.core.session_time", "03:01:39.52");

   setDMStatus();

   result = doLMSCommit();
   if(scoStatus == "terminated")
   {
      return;
   }

   lmsRTEApplet.setCurrentSCOStatus("completed");
   teststatus.innerText = "Status:  This SCO Test Completed.";
   // note the above text gets overwritten if LMSFinish fails.

   //alert("Completing testing.  Please launch the next SCO.");

   finish();
}

/*******************************************************************************
**
** Function finish()
** Inputs:  None
** Return:  None
**
** Description:
** Calls doLMSFinish which will close the communication to the LMS.
**
*******************************************************************************/
function finish()
{
   doLMSFinish("");
}

/*******************************************************************************
**
** Function checkAllPossibleCMIString255()
** Inputs:  cmiElement - Data Model Element name.
**          mandatory - True if a Mandatory element. False if Optional element.
**          writeOnly - True if Element is Write Only, otherwise false
** Return:  None
**
** Description:
** Calls apiHandle.LMSSetValue with maximum and minimum type test strings for
** the inputted Data Model element.  Checks the error status after each Set by
** calling apiHandle.LMSGetLastError.  It then calls displayInfo which will
** write to log the results and expected results of that call to
** apiHandle.LMSGetLastError.  This function is called for Data Model elements
** that are of type CMIString255.
**
*******************************************************************************/
function checkAllPossibleCMIString255(cmiElement, mandatory, writeOnly)
{
   var setString;
   var getResult;
   var lastValid;

   // Valid calls for type CMIString255
   setString = "";
   result = apiHandle.LMSSetValue(cmiElement,setString);
   errorcodeSet = apiHandle.LMSGetLastError();
   getResult = apiHandle.LMSGetValue(cmiElement);
   errorcodeGet = apiHandle.LMSGetLastError();
   displayInfoNoError(cmiElement, errorcodeSet, mandatory, "Valid CMIString255: ''(A Blank String)", result, setString, getResult, true, errorcodeGet, writeOnly);

   setString = "1";
   result = apiHandle.LMSSetValue(cmiElement,setString);
   errorcodeSet = apiHandle.LMSGetLastError();
   getResult = apiHandle.LMSGetValue(cmiElement);
   errorcodeGet = apiHandle.LMSGetLastError();
   displayInfoNoError(cmiElement, errorcodeSet, mandatory, "Valid CMIString255: 1 Character", result, setString, getResult, true, errorcodeGet, writeOnly);

   setString = "1234567890123456789012345";
   result = apiHandle.LMSSetValue(cmiElement,setString);
   errorcodeSet = apiHandle.LMSGetLastError();
   getResult = apiHandle.LMSGetValue(cmiElement);
   errorcodeGet = apiHandle.LMSGetLastError();
   displayInfoNoError(cmiElement, errorcodeSet, mandatory, "Valid CMIString255: 25 Characters", result, setString, getResult, true, errorcodeGet, writeOnly);

   setString = "123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345";
   result = apiHandle.LMSSetValue(cmiElement,setString)
   errorcodeSet = apiHandle.LMSGetLastError();
   //last valid set
   lastValid = getResult = apiHandle.LMSGetValue(cmiElement);
   errorcodeGet = apiHandle.LMSGetLastError();
   displayInfoNoError(cmiElement, errorcodeSet, mandatory, "Valid CMIString255: 255 Characters", result, setString, getResult, true, errorcodeGet, writeOnly);

   // Invalid calls for type CMIString255
   setString = "1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456";
   result = apiHandle.LMSSetValue(cmiElement,setString);
   errorcodeSet = apiHandle.LMSGetLastError();
   getResult = apiHandle.LMSGetValue(cmiElement);
   errorcodeGet = apiHandle.LMSGetLastError();
   displayInfoAsWarning(cmiElement, errorcodeSet, mandatory, _IncorrectDataType, "Invalid CMIString255: 256 Characters", result, _InvalidArgumentError, errorcodeGet, writeOnly, lastValid, getResult);

   setString = "12345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890";
   result = apiHandle.LMSSetValue(cmiElement,setString);
   errorcodeSet = apiHandle.LMSGetLastError();
   getResult = apiHandle.LMSGetValue(cmiElement);
   errorcodeGet = apiHandle.LMSGetLastError();
   displayInfoAsWarning(cmiElement, errorcodeSet, mandatory, _IncorrectDataType, "Invalid CMIString255: 500 Characters", result, _InvalidArgumentError, errorcodeGet, writeOnly, lastValid, getResult);
}

/*******************************************************************************
**
** Function checkAllPossibleCMIString4096()
** Inputs:  cmiElement - Data Model Element name.
**          mandatory - True if a Mandatory element. False if Optional element.
**          writeOnly - True if Element is Write Only, otherwise false
** Return:  None
**
** Description:
** Calls apiHandle.LMSSetValue with maximum and minimum type test strings for
** the inputted Data Model element.  Checks the error status after each Set by
** calling apiHandle.LMSGetLastError.  It then calls displayInfo which will
** write to log the results and expected results of that call to
** apiHandle.LMSGetLastError.  This function is called for Data Model elements
** that are of type CMIString4096.
**
*******************************************************************************/
function checkAllPossibleCMIString4096(cmiElement, mandatory, writeOnly)
{
   var setString;
   var getResult;
   var lastValid;

   // Valid calls for type CMIString4096
   setString = "";
   result = apiHandle.LMSSetValue(cmiElement,setString);
   errorcodeSet = apiHandle.LMSGetLastError();
   getResult = apiHandle.LMSGetValue(cmiElement);
   errorcodeGet = apiHandle.LMSGetLastError();
   displayInfoNoError(cmiElement, errorcodeSet, mandatory, "Valid CMIString4096: ''(A Blank String)", result, setString, getResult, true, errorcodeGet, writeOnly);

   setString = "1";
   result = apiHandle.LMSSetValue(cmiElement,setString);
   errorcodeSet = apiHandle.LMSGetLastError();
   getResult = apiHandle.LMSGetValue(cmiElement);
   errorcodeGet = apiHandle.LMSGetLastError();
   displayInfoNoError(cmiElement, errorcodeSet, mandatory, "Valid CMIString4096: 1 Character", result, setString, getResult, true, errorcodeGet, writeOnly);

   setString = "1234567890123456789012345";
   result = apiHandle.LMSSetValue(cmiElement,setString);
   errorcodeSet = apiHandle.LMSGetLastError();
   getResult = apiHandle.LMSGetValue(cmiElement);
   errorcodeGet = apiHandle.LMSGetLastError();
   displayInfoNoError(cmiElement, errorcodeSet, mandatory, "Valid CMIString4096: 25 Characters", result, setString, getResult, true, errorcodeGet, writeOnly);

   setString
   result = apiHandle.LMSSetValue(cmiElement,setString);
   errorcodeSet = apiHandle.LMSGetLastError();
   //last valid set
   lastValid = getResult = apiHandle.LMSGetValue(cmiElement);
   errorcodeGet = apiHandle.LMSGetLastError();
   displayInfoNoError(cmiElement, errorcodeSet, mandatory, "Valid CMIString4096: 4096 Characters", result, setString, getResult, true, errorcodeGet, writeOnly);

   // Invalid call for type CMIString4096
   setString
   result = apiHandle.LMSSetValue(cmiElement,setString);
   errorcodeSet = apiHandle.LMSGetLastError();
   getResult = apiHandle.LMSGetValue(cmiElement);
   errorcodeGet = apiHandle.LMSGetLastError();
   displayInfoAsWarning(cmiElement, errorcodeSet, mandatory, _IncorrectDataType, "Invalid CMIString4096: 4097 Characters", result, _InvalidArgumentError, errorcodeGet, writeOnly, lastValid, getResult);

   setString
   result = apiHandle.LMSSetValue(cmiElement,setString);
   errorcodeSet = apiHandle.LMSGetLastError();
   getResult = apiHandle.LMSGetValue(cmiElement);
   errorcodeGet = apiHandle.LMSGetLastError();
   displayInfoAsWarning(cmiElement, errorcodeSet, mandatory, _IncorrectDataType, "Invalid CMIString4096: 5000 Characters", result, _InvalidArgumentError, errorcodeGet, writeOnly, lastValid, getResult);
}

/*******************************************************************************
**
** Function checkAllPossibleComments4096()
** Inputs:  cmiElement - Data Model Element name.
**          mandatory - True if a Mandatory element. False if Optional element.
**          writeOnly - True if Element is Write Only, otherwise false
** Return:  None
**
** Description:
** Calls apiHandle.LMSSetValue with maximum and minimum type test strings for
** the inputted Data Model element.  Checks the error status after each Set by
** calling apiHandle.LMSGetLastError.  It then calls displayInfo which will
** write to log the results and expected results of that call to
** apiHandle.LMSGetLastError.  This function is called for Data Model elements
** that are of type CMIString4096.
**
*******************************************************************************/
function checkAllPossibleComments4096(cmiElement, mandatory, writeOnly)
{
   var setString;
   var getResult;
   var lastValid;

   // LMSSetValue concatenates strings for cmi.comments.  Valid tests for type
   // CMIString4096 type data model elements will consist of only a Blank String
   // and the maximum 4096 length string.

   // Valid calls for type CMIString4096
   setString = "";
   result = apiHandle.LMSSetValue(cmiElement,setString);
   errorcodeSet = apiHandle.LMSGetLastError();
   getResult = apiHandle.LMSGetValue(cmiElement);
   errorcodeGet = apiHandle.LMSGetLastError();
   displayInfoNoError(cmiElement, errorcodeSet, mandatory, "Valid CMIString4096: ''(A Blank String)", result, setString, getResult, true, errorcodeGet, writeOnly);

   setString
   result = apiHandle.LMSSetValue(cmiElement,setString);
   errorcodeSet = apiHandle.LMSGetLastError();
   //last valid set
   lastValid = getResult = apiHandle.LMSGetValue(cmiElement);
   errorcodeGet = apiHandle.LMSGetLastError();
   displayInfoNoError(cmiElement, errorcodeSet, mandatory, "Valid CMIString4096: 4096 Characters", result, setString, getResult, true, errorcodeGet, writeOnly);

   // Invalid call for type CMIString4096
   setString
   result = apiHandle.LMSSetValue(cmiElement,setString);
   errorcodeSet = apiHandle.LMSGetLastError();
   getResult = apiHandle.LMSGetValue(cmiElement);
   errorcodeGet = apiHandle.LMSGetLastError();
   displayInfoAsWarning(cmiElement, errorcodeSet, mandatory, _IncorrectDataType, "Invalid CMIString4096: 4097 Characters", result, _InvalidArgumentError, errorcodeGet, writeOnly, lastValid, getResult);
}


/*******************************************************************************
**
** Function checkAllPossibleCMIDecimal()
** Inputs:  cmiElement - Data Model Element name.
**          mandatory - True if a Mandatory element. False if Optional element.
**          normalized - True if the element must have a normalized score
**                   between 0 and 100.
**          readAccess - element allowed to perform LMSGetValue
**          writeOnly - True if Element is Write Only, otherwise false
** Return:  None
**
** Description:
** Calls apiHandle.LMSSetValue with various valid and invalid integer values for
** the inputted Data Model element.  Checks the error status after each Set by
** calling apiHandle.LMSGetLastError.  It then calls displayInfo which will
** write to log the results and expected results of that call to
** apiHandle.LMSGetLastError.  This function is called for Data Model elements
** that are of type CMIDecimal or CMIBlank.
**
*******************************************************************************/
function checkAllPossibleCMIDecimal(cmiElement, mandatory, normalized, readAccess, writeOnly)
{
   var setString;
   var getResult;
   var lastValid;

   // Valid calls for type CMIDecimal or CMIBlank
   setString = "0";
   result = apiHandle.LMSSetValue(cmiElement,setString);
   errorcodeSet = apiHandle.LMSGetLastError();
   getResult = apiHandle.LMSGetValue(cmiElement);
   getResult = parseFloat(getResult); // Convert string into numeric equivalent.
   errorcodeGet = apiHandle.LMSGetLastError();
   displayInfoNoError(cmiElement, errorcodeSet, mandatory, "'0'", result, setString, getResult, readAccess, errorcodeGet, writeOnly);

   setString = "90.99";
   result = apiHandle.LMSSetValue(cmiElement,setString);
   errorcodeSet = apiHandle.LMSGetLastError();
   getResult = apiHandle.LMSGetValue(cmiElement);
   getResult = parseFloat(getResult);
   errorcodeGet = apiHandle.LMSGetLastError();
   displayInfoNoError(cmiElement, errorcodeSet, mandatory, "'90.99'", result, setString, getResult, readAccess, errorcodeGet, writeOnly);

   setString = "99";
   result = apiHandle.LMSSetValue(cmiElement,setString);
   errorcodeSet = apiHandle.LMSGetLastError();
   getResult = apiHandle.LMSGetValue(cmiElement);
   getResult = parseFloat(getResult);
   errorcodeGet = apiHandle.LMSGetLastError();
   displayInfoNoError(cmiElement, errorcodeSet, mandatory, "'99'", result, setString, getResult, readAccess, errorcodeGet, writeOnly);

   setString = "100";
   result = apiHandle.LMSSetValue(cmiElement,setString);
   errorcodeSet = apiHandle.LMSGetLastError();
   //if normalized score is true, this is the last valid SetValue
   if (normalized == true)
   {
      //last valid set
      getResult = apiHandle.LMSGetValue(cmiElement);
      lastValid = getResult = parseFloat(getResult);
   }
   else
   {
      getResult = apiHandle.LMSGetValue(cmiElement);
      getResult = parseFloat(getResult);
   }
   errorcodeGet = apiHandle.LMSGetLastError();
   displayInfoNoError(cmiElement, errorcodeSet, mandatory, "'100'", result, setString, getResult, readAccess, errorcodeGet, writeOnly);

   // If normalized is true these are Invalid calls, else they are valid calls for type CMIDecimal or CMIBlank
   setString = "-99";
   result = apiHandle.LMSSetValue(cmiElement,setString);
   errorcodeSet = apiHandle.LMSGetLastError();
   getResult = apiHandle.LMSGetValue(cmiElement);
   getResult = parseFloat(getResult);
   errorcodeGet = apiHandle.LMSGetLastError();
   if (normalized == true)
   {
      displayInfoAsWarning(cmiElement, errorcodeSet, mandatory, _IncorrectDataType, "'-99'", result, _InvalidArgumentError, errorcodeGet, writeOnly, lastValid, getResult);
   }
   else
   {
      displayInfoNoError(cmiElement, errorcodeSet, mandatory, "'-99'", result, setString, getResult, readAccess, errorcodeGet, writeOnly);
   }

   setString = "-90.99";
   result = apiHandle.LMSSetValue(cmiElement,setString);
   errorcodeSet = apiHandle.LMSGetLastError();
   if (normalized == true)
   {
      getResult = apiHandle.LMSGetValue(cmiElement);
      getResult = parseFloat(getResult); // Convert string to numeric equivalent
      errorcodeGet = apiHandle.LMSGetLastError();
      displayInfoAsWarning(cmiElement, errorcodeSet, mandatory, _IncorrectDataType, "'-90.99'", result, _InvalidArgumentError, errorcodeGet, writeOnly, lastValid, getResult);
   }
   else
   {
      //last valid set
      getResult = apiHandle.LMSGetValue(cmiElement);
      lastValid = getResult = parseFloat(getResult);
      errorcodeGet = apiHandle.LMSGetLastError();
      displayInfoNoError(cmiElement, errorcodeSet, mandatory, "'-90.99'", result, setString, getResult, readAccess, errorcodeGet, writeOnly);
   }

   // Invalid call for all type CMIDecimal or CMIBlank
   setString = "one hundred";
   result = apiHandle.LMSSetValue(cmiElement,setString);
   errorcodeSet = apiHandle.LMSGetLastError();
   getResult = apiHandle.LMSGetValue(cmiElement);
   getResult = parseFloat(getResult);
   errorcodeGet = apiHandle.LMSGetLastError();
   displayInfoAsWarning(cmiElement, errorcodeSet, mandatory, _IncorrectDataType, "'one hundred' - written out", result, _InvalidArgumentError, errorcodeGet, writeOnly, lastValid, getResult);
}

/*******************************************************************************
**
** Function checkAllPossibleStatuses()
** Inputs:  cmiElement - Data Model Element name.
**          mandatory - True if a Mandatory element. False if Optional element.
**          useNotAttempted - True if using 'not attempted' is allowed, false
**                indicates this will return an error condition
**          writeOnly - True if Element is Write Only, otherwise false
** Return:  None
**
** Description:
** Calls apiHandle.LMSSetValue with various valid and invalid Vocabulary strings
** for the inputted Data Model element.  Checks the error status after each Set
** by calling apiHandle.LMSGetLastError.  It then calls displayInfo which will
** write to log the results and expected results of that call to
** apiHandle.LMSGetLastError.  This function is called for Data Model elements
** that are of type CMIVocabulary and that have the following as their valid
** Vocabulary values: passed, completed, failed, incomplete, browsed, not
** attempted.
**
*******************************************************************************/
function checkAllPossibleStatuses(cmiElement, mandatory, useNotAttempted, writeOnly)
{
   var setString;
   var getResult;
   var lastValid;

   // Valid calls for type CMIVocabulary (Status)
   setString = "passed";
   result = apiHandle.LMSSetValue(cmiElement,setString);
   errorcodeSet = apiHandle.LMSGetLastError();
   getResult = apiHandle.LMSGetValue(cmiElement);
   errorcodeGet = apiHandle.LMSGetLastError();
   displayInfoNoError(cmiElement, errorcodeSet, mandatory, "Valid CMIVocabulary: 'passed'", result, setString, getResult, true, errorcodeGet, writeOnly);

   setString = "completed";
   result = apiHandle.LMSSetValue(cmiElement,setString);
   errorcodeSet = apiHandle.LMSGetLastError();
   getResult = apiHandle.LMSGetValue(cmiElement);
   errorcodeGet = apiHandle.LMSGetLastError();
   displayInfoNoError(cmiElement, errorcodeSet, mandatory, "Valid CMIVocabulary: 'completed'", result, setString, getResult, true, errorcodeGet, writeOnly);

   setString = "failed";
   result = apiHandle.LMSSetValue(cmiElement,setString);
   errorcodeSet = apiHandle.LMSGetLastError();
   getResult = apiHandle.LMSGetValue(cmiElement);
   errorcodeGet = apiHandle.LMSGetLastError();
   displayInfoNoError(cmiElement, errorcodeSet, mandatory, "Valid CMIVocabulary: 'failed'", result, setString, getResult, true, errorcodeGet, writeOnly);

   setString = "incomplete";
   result = apiHandle.LMSSetValue(cmiElement,setString);
   errorcodeSet = apiHandle.LMSGetLastError();
   getResult = apiHandle.LMSGetValue(cmiElement);
   errorcodeGet = apiHandle.LMSGetLastError();
   displayInfoNoError(cmiElement, errorcodeSet, mandatory, "Valid CMIVocabulary: 'incomplete'", result, setString, getResult, true, errorcodeGet, writeOnly);

   setString = "browsed";
   result = apiHandle.LMSSetValue(cmiElement,setString);
   errorcodeSet = apiHandle.LMSGetLastError();
   if (useNotAttempted == true)
   {
      getResult = apiHandle.LMSGetValue(cmiElement);
   }
   else
   {
      //last valid set
      lastValid = getResult = apiHandle.LMSGetValue(cmiElement);
   }
   errorcodeGet = apiHandle.LMSGetLastError();
   displayInfoNoError(cmiElement, errorcodeSet, mandatory, "Valid CMIVocabulary: 'browsed'", result, setString, getResult, true, errorcodeGet, writeOnly);

   // if 'not attempted' is allowed LMSSetValue will return No Error else it will return an error code
   setString = "not attempted";
   result = apiHandle.LMSSetValue(cmiElement,setString);
   errorcodeSet = apiHandle.LMSGetLastError();
   if (useNotAttempted == true)
   {
      //last valid set
      lastValid = getResult = apiHandle.LMSGetValue(cmiElement);
      errorcodeGet = apiHandle.LMSGetLastError();
      displayInfoNoError(cmiElement, errorcodeSet, mandatory, "Valid CMIVocabulary: 'not attempted'", result, setString, getResult, true, errorcodeGet, writeOnly);
   }
   else
   {
      getResult = apiHandle.LMSGetValue(cmiElement);
      errorcodeGet = apiHandle.LMSGetLastError();
      displayInfoAsWarning(cmiElement, errorcodeSet, mandatory, _IncorrectDataType, "Invalid CMIVocabulary: 'not attempted'", result, _InvalidArgumentError, errorcodeGet, writeOnly, lastValid, getResult);
   }

   // Invalid calls for type CMIVocabulary (Status)
   setString = "NA";
   result = apiHandle.LMSSetValue(cmiElement,setString);
   errorcodeSet = apiHandle.LMSGetLastError();
   getResult = apiHandle.LMSGetValue(cmiElement);
   errorcodeGet = apiHandle.LMSGetLastError();
   displayInfoAsWarning(cmiElement, errorcodeSet, mandatory, _IncorrectDataType, "Invalid CMIVocabulary: 'NA'", result, _InvalidArgumentError, errorcodeGet, writeOnly, lastValid, getResult);

   setString = "status set to completed";
   result = apiHandle.LMSSetValue(cmiElement,setString);
   errorcodeSet = apiHandle.LMSGetLastError();
   getResult = apiHandle.LMSGetValue(cmiElement);
   errorcodeGet = apiHandle.LMSGetLastError();
   displayInfoAsWarning(cmiElement, errorcodeSet, mandatory, _IncorrectDataType, "Invalid CMIVocabulary: 'status set to completed'", result, _InvalidArgumentError, errorcodeGet, writeOnly, lastValid, getResult);

   setString = "Passed";
   result = apiHandle.LMSSetValue(cmiElement,setString);
   errorcodeSet = apiHandle.LMSGetLastError();
   getResult = apiHandle.LMSGetValue(cmiElement);
   errorcodeGet = apiHandle.LMSGetLastError();
   displayInfoAsWarning(cmiElement, errorcodeSet, mandatory, _IncorrectDataType, "Invalid CMIVocabulary: 'Passed'", result, _InvalidArgumentError, errorcodeGet, writeOnly, lastValid, getResult);
}

/*******************************************************************************
**
** Function checkAllPossibleCMIIdentifier()
** Inputs:  cmiElement - Data Model Element name.
**          mandatory - True if a Mandatory element. False if Optional element.
**          readAccess - element allowed to perform LMSGetValue
**          writeOnly - True if Element is Write Only, otherwise false
** Return:  None
**
** Description:
** Calls apiHandle.LMSSetValue with maximum and minimum type test strings for
** the inputted Data Model element.  Checks the error status after each Set by
** calling apiHandle.LMSGetLastError.  It then calls displayInfo which will
** write to log the results and expected results of that call to
** apiHandle.LMSGetLastError.  This function is called for Data Model elements
** that are of type CMIIdentifier.
**
*******************************************************************************/
function checkAllPossibleCMIIdentifier(cmiElement, mandatory, readAccess, writeOnly)
{
   var setString;
   var getResult;
   var lastValid;

   // Valid calls for type CMIIdentifier
   setString = "1";
   result = apiHandle.LMSSetValue(cmiElement,setString);
   errorcodeSet = apiHandle.LMSGetLastError();
   getResult = apiHandle.LMSGetValue(cmiElement);
   errorcodeGet = apiHandle.LMSGetLastError();
   displayInfoNoError(cmiElement, errorcodeSet, mandatory, "Valid CMIIdentifier 1 Character", result, setString, getResult, readAccess, errorcodeGet, writeOnly);

   setString = "1234567890123456789012345";
   result = apiHandle.LMSSetValue(cmiElement,setString);
   errorcodeSet = apiHandle.LMSGetLastError();
   getResult = apiHandle.LMSGetValue(cmiElement);
   errorcodeGet = apiHandle.LMSGetLastError();
   displayInfoNoError(cmiElement, errorcodeSet, mandatory, "Valid CMIIdentifier 25 Characters", result, setString, getResult, readAccess, errorcodeGet, writeOnly);

   setString = "123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345";
   result = apiHandle.LMSSetValue(cmiElement,setString);
   errorcodeSet = apiHandle.LMSGetLastError();
   //last valid set
   lastValid = getResult = apiHandle.LMSGetValue(cmiElement);
   errorcodeGet = apiHandle.LMSGetLastError();
   displayInfoNoError(cmiElement, errorcodeSet, mandatory, "Valid CMIIdentifier 255 Characters", result, setString, getResult, readAccess, errorcodeGet, writeOnly);

   // Invalid calls for type CMIIdentifier
   setString = "";
   result = apiHandle.LMSSetValue(cmiElement,setString);
   errorcodeSet = apiHandle.LMSGetLastError();
   getResult = apiHandle.LMSGetValue(cmiElement);
   errorcodeGet = apiHandle.LMSGetLastError();
   displayInfoAsWarning(cmiElement, errorcodeSet, mandatory, _IncorrectDataType, "Invalid CMIIdentifier ''(A Blank String)", result, _InvalidArgumentError, errorcodeGet, writeOnly, lastValid, getResult);

   setString = "1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456";
   result = apiHandle.LMSSetValue(cmiElement,setString);
   errorcodeSet = apiHandle.LMSGetLastError();
   getResult = apiHandle.LMSGetValue(cmiElement);
   errorcodeGet = apiHandle.LMSGetLastError();
   displayInfoAsWarning(cmiElement, errorcodeSet, mandatory, _IncorrectDataType, "Invalid CMIIdentifier 256 Characters", result, _InvalidArgumentError, errorcodeGet, writeOnly, lastValid, getResult);

   setString = "12345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890";
   result = apiHandle.LMSSetValue(cmiElement,setString);
   errorcodeSet = apiHandle.LMSGetLastError();
   getResult = apiHandle.LMSGetValue(cmiElement);
   errorcodeGet = apiHandle.LMSGetLastError();
   displayInfoAsWarning(cmiElement, errorcodeSet, mandatory, _IncorrectDataType, "Invalid CMIIdentifier 500 Characters", result, _InvalidArgumentError, errorcodeGet, writeOnly, lastValid, getResult);
}

/*******************************************************************************
**
** Function checkAllPossibleTimespans()
** Inputs:  cmiElement - Data Model Element name.
**          mandatory - True if a Mandatory element. False if Optional element.
**          writeOnly - True if Element is Write Only, otherwise false
** Return:  None
**
** Description:
** Calls apiHandle.LMSSetValue with various valid and invalid CMITimespan values
** for the inputted Data Model element.  Checks the error status after each Set
** by calling apiHandle.LMSGetLastError.  It then calls displayInfo which will
** write to log the results and expected results of that call to
** apiHandle.LMSGetLastError.  This function is called for Data Model elements
** that are of type CMITimespan.
**
*******************************************************************************/
function checkAllPossibleTimespans(cmiElement, mandatory, writeOnly)
{
   var setString;
   var getResult;
   var lastValid;

   // Valid calls for type CMITimespan
   setString = "0000:03:45.5";
   result = apiHandle.LMSSetValue(cmiElement,setString);
   errorcodeSet = apiHandle.LMSGetLastError();
   getResult = apiHandle.LMSGetValue(cmiElement);
   errorcodeGet = apiHandle.LMSGetLastError();
   displayInfoNoError(cmiElement, errorcodeSet, mandatory, "Valid CMITimespan '0000:03:45.5'", result, setString, getResult, false, errorcodeGet, writeOnly);

   setString = "1121:03:40";
   result = apiHandle.LMSSetValue(cmiElement,setString);
   errorcodeSet = apiHandle.LMSGetLastError();
   getResult = apiHandle.LMSGetValue(cmiElement);
   errorcodeGet = apiHandle.LMSGetLastError();
   displayInfoNoError(cmiElement, errorcodeSet, mandatory, "Valid CMITimespan '1121:03:40'", result, setString, getResult, false, errorcodeGet, writeOnly);

   setString = "1121:00:40";
   result = apiHandle.LMSSetValue(cmiElement,setString);
   errorcodeSet = apiHandle.LMSGetLastError();
   getResult = apiHandle.LMSGetValue(cmiElement);
   errorcodeGet = apiHandle.LMSGetLastError();
   displayInfoNoError(cmiElement, errorcodeSet, mandatory, "Valid CMITimespan '1121:00:40'", result, setString, getResult, false, errorcodeGet, writeOnly);

   setString = "0000:00:40";
   result = apiHandle.LMSSetValue(cmiElement,setString);
   errorcodeSet = apiHandle.LMSGetLastError();
   getResult = apiHandle.LMSGetValue(cmiElement);
   errorcodeGet = apiHandle.LMSGetLastError();
   displayInfoNoError(cmiElement, errorcodeSet, mandatory, "Valid CMITimespan '0000:00:40'", result, setString, getResult, false, errorcodeGet, writeOnly);

   setString = "0000:00:40.5";
   result = apiHandle.LMSSetValue(cmiElement,setString);
   errorcodeSet = apiHandle.LMSGetLastError();
   getResult = apiHandle.LMSGetValue(cmiElement);
   errorcodeGet = apiHandle.LMSGetLastError();
   displayInfoNoError(cmiElement, errorcodeSet, mandatory, "Valid CMITimespan '0000:00:40.5'", result, setString, getResult, false, errorcodeGet, writeOnly);

   setString = "0000:00:00";
   result = apiHandle.LMSSetValue(cmiElement,setString);
   errorcodeSet = apiHandle.LMSGetLastError();
   getResult = apiHandle.LMSGetValue(cmiElement);
   errorcodeGet = apiHandle.LMSGetLastError();
   displayInfoNoError(cmiElement, errorcodeSet, mandatory, "Valid CMITimespan '0000:00:00'", result, setString, getResult, false, errorcodeGet, writeOnly);

   setString = "30:30:40";
   result = apiHandle.LMSSetValue(cmiElement,setString);
   errorcodeSet = apiHandle.LMSGetLastError();
   getResult = apiHandle.LMSGetValue(cmiElement);
   errorcodeGet = apiHandle.LMSGetLastError();
   displayInfoNoError(cmiElement, errorcodeSet, mandatory, "Valid CMITimespan '30:30:40'", result, setString, getResult, false, errorcodeGet, writeOnly);

   setString = "30:99:40";
   result = apiHandle.LMSSetValue(cmiElement,setString);
   errorcodeSet = apiHandle.LMSGetLastError();
   //last valid set
   lastValid = getResult = apiHandle.LMSGetValue(cmiElement);
   errorcodeGet = apiHandle.LMSGetLastError();
   displayInfoNoError(cmiElement, errorcodeSet, mandatory, "Valid CMITimespan '30:99:40'", result, setString, getResult, false, errorcodeGet, writeOnly);

   // Invalid calls for type CMITimespan
   setString = "3 hours";
   result = apiHandle.LMSSetValue(cmiElement,setString);
   errorcodeSet = apiHandle.LMSGetLastError();
   getResult = apiHandle.LMSGetValue(cmiElement);
   errorcodeGet = apiHandle.LMSGetLastError();
   displayInfoAsWarning(cmiElement, errorcodeSet, mandatory, _IncorrectDataType, "Invalid CMITimespan '3 hours'", result, _InvalidArgumentError, errorcodeGet, writeOnly, lastValid, getResult);

   setString = "33330:30:40";
   result = apiHandle.LMSSetValue(cmiElement,setString);
   errorcodeSet = apiHandle.LMSGetLastError();
   getResult = apiHandle.LMSGetValue(cmiElement);
   errorcodeGet = apiHandle.LMSGetLastError();
   displayInfoAsWarning(cmiElement, errorcodeSet, mandatory, _IncorrectDataType, "Invalid CMITimespan '33330:30:40'", result, _InvalidArgumentError, errorcodeGet, writeOnly, lastValid, getResult);

   setString = "3330:330:40";
   result = apiHandle.LMSSetValue(cmiElement,setString);
   errorcodeSet = apiHandle.LMSGetLastError();
   getResult = apiHandle.LMSGetValue(cmiElement);
   errorcodeGet = apiHandle.LMSGetLastError();
   displayInfoAsWarning(cmiElement, errorcodeSet, mandatory, _IncorrectDataType, "Invalid CMITimespan '3330:330:40'", result, _InvalidArgumentError, errorcodeGet, writeOnly, lastValid, getResult);

   setString = "3330:30:40 seconds";
   result = apiHandle.LMSSetValue(cmiElement,setString);
   errorcodeSet = apiHandle.LMSGetLastError();
   getResult = apiHandle.LMSGetValue(cmiElement);
   errorcodeGet = apiHandle.LMSGetLastError();
   displayInfoAsWarning(cmiElement, errorcodeSet, mandatory, _IncorrectDataType, "Invalid CMITimespan '3330:30:40 seconds'", result, _InvalidArgumentError, errorcodeGet, writeOnly, lastValid, getResult);

   setString = "3330:30:1.34";
   result = apiHandle.LMSSetValue(cmiElement,setString);
   errorcodeSet = apiHandle.LMSGetLastError();
   getResult = apiHandle.LMSGetValue(cmiElement);
   errorcodeGet = apiHandle.LMSGetLastError();
   displayInfoAsWarning(cmiElement, errorcodeSet, mandatory, _IncorrectDataType, "Invalid CMITimespan '3330:30:1.34'", result, _InvalidArgumentError, errorcodeGet, writeOnly, lastValid, getResult);

   setString = "3330:30:1.344545";
   result = apiHandle.LMSSetValue(cmiElement,setString);
   errorcodeSet = apiHandle.LMSGetLastError();
   getResult = apiHandle.LMSGetValue(cmiElement);
   errorcodeGet = apiHandle.LMSGetLastError();
   displayInfoAsWarning(cmiElement, errorcodeSet, mandatory, _IncorrectDataType, "Invalid CMITimespan '3330:30:1.344545'", result, _InvalidArgumentError, errorcodeGet, writeOnly, lastValid, getResult);
}

/*******************************************************************************
**
** Function checkAllPossibleTimes()
** Inputs:  cmiElement - Data Model Element name.
**          mandatory - True if a Mandatory element. False if Optional element.
**          writeOnly - True if Element is Write Only, otherwise false
** Return:  None
**
** Description:
** Calls apiHandle.LMSSetValue with various valid and invalid CMITime values for
** the inputted Data Model element.  Checks the error status after each Set by
** calling apiHandle.LMSGetLastError.  It then calls displayInfo which will
** write to log the results and expected results of that call to
** apiHandle.LMSGetLastError.  This function is called for Data Model elements
** that are of type CMITime.
**
*******************************************************************************/
function checkAllPossibleTimes(cmiElement, mandatory, writeOnly)
{
   var setString;
   var getResult;
   var lastValid;

   // Valid calls for type CMITime
   setString = "23:03:33.4";
   result = apiHandle.LMSSetValue(cmiElement,setString);
   errorcodeSet = apiHandle.LMSGetLastError();
   getResult = apiHandle.LMSGetValue(cmiElement);
   errorcodeGet = apiHandle.LMSGetLastError();
   displayInfoNoError(cmiElement, errorcodeSet, mandatory, "Valid CMITime '23:03:33.4'", result, setString, getResult, false, errorcodeGet, writeOnly);

   setString = "00:00:00";
   result = apiHandle.LMSSetValue(cmiElement,setString);
   errorcodeSet = apiHandle.LMSGetLastError();
   getResult = apiHandle.LMSGetValue(cmiElement);
   errorcodeGet = apiHandle.LMSGetLastError();
   displayInfoNoError(cmiElement, errorcodeSet, mandatory, "Valid CMITime '00:00:00'", result, setString, getResult, false, errorcodeGet, writeOnly);

   setString = "00:00:00.5";
   result = apiHandle.LMSSetValue(cmiElement,setString);
   errorcodeSet = apiHandle.LMSGetLastError();
   getResult = apiHandle.LMSGetValue(cmiElement);
   errorcodeGet = apiHandle.LMSGetLastError();
   displayInfoNoError(cmiElement, errorcodeSet, mandatory, "Valid CMITime '00:00:00.5'", result, setString, getResult, false, errorcodeGet, writeOnly);

   setString = "00:00:35.5";
   result = apiHandle.LMSSetValue(cmiElement,setString);
   errorcodeSet = apiHandle.LMSGetLastError();
   getResult = apiHandle.LMSGetValue(cmiElement);
   errorcodeGet = apiHandle.LMSGetLastError();
   displayInfoNoError(cmiElement, errorcodeSet, mandatory, "Valid CMITime '00:00:35.5'", result, setString, getResult, false, errorcodeGet, writeOnly);

   setString = "00:10:35.5";
   result = apiHandle.LMSSetValue(cmiElement,setString);
   errorcodeSet = apiHandle.LMSGetLastError();
   //last valid set
   lastValid = getResult = apiHandle.LMSGetValue(cmiElement);
   errorcodeGet = apiHandle.LMSGetLastError();
   displayInfoNoError(cmiElement, errorcodeSet, mandatory, "Valid CMITime '00:10:35.5'", result, setString, getResult, false, errorcodeGet, writeOnly);

   // Invalid calls for type CMITime
   setString = "99:03:33.4";
   result = apiHandle.LMSSetValue(cmiElement,setString);
   errorcodeSet = apiHandle.LMSGetLastError();
   getResult = apiHandle.LMSGetValue(cmiElement);
   errorcodeGet = apiHandle.LMSGetLastError();
   displayInfoAsWarning(cmiElement, errorcodeSet, mandatory, _IncorrectDataType, "Invalid CMITime '99:03:33.4'", result, _InvalidArgumentError, errorcodeGet, writeOnly, lastValid, getResult);

   setString = "12:99:33.4";
   result = apiHandle.LMSSetValue(cmiElement,setString);
   errorcodeSet = apiHandle.LMSGetLastError();
   getResult = apiHandle.LMSGetValue(cmiElement);
   errorcodeGet = apiHandle.LMSGetLastError();
   displayInfoAsWarning(cmiElement, errorcodeSet, mandatory, _IncorrectDataType, "Invalid CMITime '12:99:33.4'", result, _InvalidArgumentError, errorcodeGet, writeOnly, lastValid, getResult);

   setString = "12:99:3 seconds";
   result = apiHandle.LMSSetValue(cmiElement,setString);
   errorcodeSet = apiHandle.LMSGetLastError();
   getResult = apiHandle.LMSGetValue(cmiElement);
   errorcodeGet = apiHandle.LMSGetLastError();
   displayInfoAsWarning(cmiElement, errorcodeSet, mandatory, _IncorrectDataType, "Invalid CMITime '12:99:3 seconds'", result, _InvalidArgumentError, errorcodeGet, writeOnly, lastValid, getResult);

   setString = "9812:99:33.4";
   result = apiHandle.LMSSetValue(cmiElement,setString);
   errorcodeSet = apiHandle.LMSGetLastError();
   getResult = apiHandle.LMSGetValue(cmiElement);
   errorcodeGet = apiHandle.LMSGetLastError();
   displayInfoAsWarning(cmiElement, errorcodeSet, mandatory, _IncorrectDataType, "Invalid CMITime '9812:99:33.4'", result, _InvalidArgumentError, errorcodeGet, writeOnly, lastValid, getResult);
}

/*******************************************************************************
**
** Function checkAllPossibleResults()
** Inputs:  cmiElement - Data Model Element name.
**          mandatory - True if a Mandatory element. False if Optional element.
**          writeOnly - True if Element is Write Only, otherwise false
** Return:  None
**
** Description:
** Calls apiHandle.LMSSetValue with various valid and invalid Vocabulary strings
** for the inputted Data Model element.  Checks the error status after each Set
** by calling apiHandle.LMSGetLastError.  It then calls displayInfo which will
** write to log the results and expected results of that call to
** apiHandle.LMSGetLastError.  This function is called for Data Model elements
** that are of type CMIVocabulary and that have the following as their valid
** Vocabulary values: correct, wrong, unanticipated, neutral, any decimal value.
**
*******************************************************************************/
function checkAllPossibleResults(cmiElement, mandatory, writeOnly)
{
   var setString;
   var getResult;
   var lastValid;

   // Valid calls for type CMIVocabulary (Result)
   setString = "correct";
   result = apiHandle.LMSSetValue(cmiElement,setString);
   errorcodeSet = apiHandle.LMSGetLastError();
   getResult = apiHandle.LMSGetValue(cmiElement);
   errorcodeGet = apiHandle.LMSGetLastError();
   displayInfoNoError(cmiElement, errorcodeSet, mandatory, "Valid CMIVocabulary 'correct'", result, setString, getResult, false, errorcodeGet, writeOnly);

   setString = "wrong";
   result = apiHandle.LMSSetValue(cmiElement,setString);
   errorcodeSet = apiHandle.LMSGetLastError();
   getResult = apiHandle.LMSGetValue(cmiElement);
   errorcodeGet = apiHandle.LMSGetLastError();
   displayInfoNoError(cmiElement, errorcodeSet, mandatory, "Valid CMIVocabulary 'wrong'", result, setString, getResult, false, errorcodeGet, writeOnly);

   setString = "unanticipated";
   result = apiHandle.LMSSetValue(cmiElement,setString);
   errorcodeSet = apiHandle.LMSGetLastError();
   getResult = apiHandle.LMSGetValue(cmiElement);
   errorcodeGet = apiHandle.LMSGetLastError();
   displayInfoNoError(cmiElement, errorcodeSet, mandatory, "Valid CMIVocabulary 'unanticipated'", result, setString, getResult, false, errorcodeGet, writeOnly);

   setString = "neutral";
   result = apiHandle.LMSSetValue(cmiElement,setString);
   errorcodeSet = apiHandle.LMSGetLastError();
   getResult = apiHandle.LMSGetValue(cmiElement);
   errorcodeGet = apiHandle.LMSGetLastError();
   displayInfoNoError(cmiElement, errorcodeSet, mandatory, "Valid CMIVocabulary 'neutral'", result, setString, getResult, false, errorcodeGet, writeOnly);

   setString = "95.5";
   result = apiHandle.LMSSetValue(cmiElement,setString);
   errorcodeSet = apiHandle.LMSGetLastError();
   //last valid set
   lastValid = getResult = apiHandle.LMSGetValue(cmiElement);
   errorcodeGet = apiHandle.LMSGetLastError();
   displayInfoNoError(cmiElement, errorcodeSet, mandatory, "Valid CMIVocabulary, a decimal value '95.5'", result, setString, getResult, false, errorcodeGet, writeOnly);

   // Invalid calls for type CMIVocabulary (Result)
   setString = "C";
   result = apiHandle.LMSSetValue(cmiElement,setString);
   errorcodeSet = apiHandle.LMSGetLastError();
   getResult = apiHandle.LMSGetValue(cmiElement);
   errorcodeGet = apiHandle.LMSGetLastError();
   displayInfoAsWarning(cmiElement, errorcodeSet, mandatory, _IncorrectDataType, "Invalid CMIVocabulary 'C'", result, _InvalidArgumentError, errorcodeGet, writeOnly, lastValid, getResult);

   setString = "WRONG";
   result = apiHandle.LMSSetValue(cmiElement,setString);
   errorcodeSet = apiHandle.LMSGetLastError();
   getResult = apiHandle.LMSGetValue(cmiElement);
   errorcodeGet = apiHandle.LMSGetLastError();
   displayInfoAsWarning(cmiElement, errorcodeSet, mandatory, _IncorrectDataType, "Invalid CMIVocabulary 'WRONG'", result, _InvalidArgumentError, errorcodeGet, writeOnly, lastValid, getResult);

   setString = "UNanticipated";
   result = apiHandle.LMSSetValue(cmiElement,setString);
   errorcodeSet = apiHandle.LMSGetLastError();
   getResult = apiHandle.LMSGetValue(cmiElement);
   errorcodeGet = apiHandle.LMSGetLastError();
   displayInfoAsWarning(cmiElement, errorcodeSet, mandatory, _IncorrectDataType, "Invalid CMIVocabulary 'UNanticipated'", result, _InvalidArgumentError, errorcodeGet, writeOnly, lastValid, getResult);
}

/*******************************************************************************
**
** Function checkAllPossibleExitStatuses()
** Inputs:  cmiElement - Data Model Element name.
**          mandatory - True if a Mandatory element. False if Optional element.
**          writeOnly - True if Element is Write Only, otherwise false
** Return:  None
**
** Description:
** Calls apiHandle.LMSSetValue with various valid and invalid Vocabulary strings
** for the inputted Data Model element.  Checks the error status after each Set
** by calling apiHandle.LMSGetLastError.  It then calls displayInfo which will
** write to log the results and expected results of that call to
** apiHandle.LMSGetLastError.  This function is called for Data Model elements
** that are of type CMIVocabulary and that have the following as their valid
** Vocabulary values: time-out, suspend, logout, an empty string.
**
*******************************************************************************/
function checkAllPossibleExitStatuses(cmiElement, mandatory, writeOnly)
{
   var setString;
   var getResult;
   var lastValid;

   // Valid calls for type CMIVocabulary (Exit)
   setString = "time-out";
   result = apiHandle.LMSSetValue(cmiElement,setString);
   errorcodeSet = apiHandle.LMSGetLastError();
   getResult = apiHandle.LMSGetValue(cmiElement);
   errorcodeGet = apiHandle.LMSGetLastError();
   displayInfoNoError(cmiElement, errorcodeSet, mandatory, "Valid CMIVocabulary: 'time-out'", result, setString, getResult, false, errorcodeGet, writeOnly);

   setString = "suspend";
   result = apiHandle.LMSSetValue(cmiElement,setString);
   errorcodeSet = apiHandle.LMSGetLastError();
   getResult = apiHandle.LMSGetValue(cmiElement);
   errorcodeGet = apiHandle.LMSGetLastError();
   displayInfoNoError(cmiElement, errorcodeSet, mandatory, "Valid CMIVocabulary: 'suspend'", result, setString, getResult, false, errorcodeGet, writeOnly);

   setString = "logout";
   result = apiHandle.LMSSetValue(cmiElement,setString);
   errorcodeSet = apiHandle.LMSGetLastError();
   getResult = apiHandle.LMSGetValue(cmiElement);
   errorcodeGet = apiHandle.LMSGetLastError();
   displayInfoNoError(cmiElement, errorcodeSet, mandatory, "Valid CMIVocabulary: 'logout'", result, setString, getResult, false, errorcodeGet, writeOnly);

   setString = "";
   result = apiHandle.LMSSetValue(cmiElement,setString);
   errorcodeSet = apiHandle.LMSGetLastError();
   //last valid set
   lastValid = getResult = apiHandle.LMSGetValue(cmiElement);
   errorcodeGet = apiHandle.LMSGetLastError();
   displayInfoNoError(cmiElement, errorcodeSet, mandatory, "Empty String", result, setString, getResult, false, errorcodeGet, writeOnly);

   // Invalid calls for type CMIVocabulary (Exit)
   setString = "Suspend";
   result = apiHandle.LMSSetValue(cmiElement,setString);
   errorcodeSet = apiHandle.LMSGetLastError();
   getResult = apiHandle.LMSGetValue(cmiElement);
   errorcodeGet = apiHandle.LMSGetLastError();
   displayInfoAsWarning(cmiElement, errorcodeSet, mandatory, _IncorrectDataType, "Invalid CMIVocabulary: 'Suspend'", result, _InvalidArgumentError, errorcodeGet, writeOnly, lastValid, getResult);

   setString = "LOGOUT";
   result = apiHandle.LMSSetValue(cmiElement,setString);
   errorcodeSet = apiHandle.LMSGetLastError();
   getResult = apiHandle.LMSGetValue(cmiElement);
   errorcodeGet = apiHandle.LMSGetLastError();
   displayInfoAsWarning(cmiElement, errorcodeSet, mandatory, _IncorrectDataType, "Invalid CMIVocabulary: 'LOGOUT'", result, _InvalidArgumentError, errorcodeGet, writeOnly, lastValid, getResult);

   setString = "T";
   result = apiHandle.LMSSetValue(cmiElement,setString);
   errorcodeSet = apiHandle.LMSGetLastError();
   getResult = apiHandle.LMSGetValue(cmiElement);
   errorcodeGet = apiHandle.LMSGetLastError();
   displayInfoAsWarning(cmiElement, errorcodeSet, mandatory, _IncorrectDataType, "Invalid CMIVocabulary: 'T'", result, _InvalidArgumentError, errorcodeGet, writeOnly, lastValid, getResult);

   setString = "timeout";
   result = apiHandle.LMSSetValue(cmiElement,setString);
   errorcodeSet = apiHandle.LMSGetLastError();
   getResult = apiHandle.LMSGetValue(cmiElement);
   errorcodeGet = apiHandle.LMSGetLastError();
   displayInfoAsWarning(cmiElement, errorcodeSet, mandatory, _IncorrectDataType, "Invalid CMIVocabulary: 'timeout'", result, _InvalidArgumentError, errorcodeGet, writeOnly, lastValid, getResult);

   setString = "timeou";
   result = apiHandle.LMSSetValue(cmiElement,setString);
   errorcodeSet = apiHandle.LMSGetLastError();
   getResult = apiHandle.LMSGetValue(cmiElement);
   errorcodeGet = apiHandle.LMSGetLastError();
   displayInfoAsWarning(cmiElement, errorcodeSet, mandatory, _IncorrectDataType, "Invalid CMIVocabulary: 'timeou'", result, _InvalidArgumentError, errorcodeGet, writeOnly, lastValid, getResult);
}

/*******************************************************************************
**
** Function checkAllPossibleCMISIntegerAudio()
** Inputs:  cmiElement - Data Model Element name.
**          mandatory - True if a Mandatory element. False if Optional element.
**          writeOnly - True if Element is Write Only, otherwise false
** Return:  None
**
** Description:
** Currently called only for cmi.student_preference.audio.
** Calls apiHandle.LMSSetValue with various valid and invalid integer values for
** the  inputted Data Model element.  Checks the error status after each Set by
** calling apiHandle.LMSGetLastError.  It then calls displayInfo which will
** write to log the results and expected results of that call to
** apiHandle.LMSGetLastError.  This function is called for Data Model elements
** that are of type CMISInteger.
**
*******************************************************************************/
function  checkAllPossibleCMISIntegerAudio(cmiElement, mandatory, writeOnly)
{
   var setString;
   var getResult;
   var lastValid;

   // Valid calls for type CMISInteger
   setString = "-1";
   result = apiHandle.LMSSetValue(cmiElement,setString);
   errorcodeSet = apiHandle.LMSGetLastError();
   getResult = apiHandle.LMSGetValue(cmiElement);
   getResult = parseInt(getResult); // Convert string into numeric equivalent
   errorcodeGet = apiHandle.LMSGetLastError();
   displayInfoNoError(cmiElement, errorcodeSet, mandatory, "'-1'", result, setString, getResult, true, errorcodeGet, writeOnly);

   setString = "0";
   result = apiHandle.LMSSetValue(cmiElement,setString);
   errorcodeSet = apiHandle.LMSGetLastError();
   getResult = apiHandle.LMSGetValue(cmiElement);
   getResult = parseInt(getResult);
   errorcodeGet = apiHandle.LMSGetLastError();
   displayInfoNoError(cmiElement, errorcodeSet, mandatory, "'0'", result, setString, getResult, true, errorcodeGet, writeOnly);

   setString = "100";
   result = apiHandle.LMSSetValue(cmiElement,setString);
   errorcodeSet = apiHandle.LMSGetLastError();
   //last valid set
   getResult = apiHandle.LMSGetValue(cmiElement);
   lastValid = getResult = parseInt(getResult);
   errorcodeGet = apiHandle.LMSGetLastError();
   displayInfoNoError(cmiElement, errorcodeSet, mandatory, "'100'", result, setString, getResult, true, errorcodeGet, writeOnly);

   // Invalid calls for type CMISInteger
   setString = "-2";
   result = apiHandle.LMSSetValue(cmiElement,setString);
   errorcodeSet = apiHandle.LMSGetLastError();
   getResult = apiHandle.LMSGetValue(cmiElement);
   getResult = parseInt(getResult);
   errorcodeGet = apiHandle.LMSGetLastError();
   displayInfoAsWarning(cmiElement, errorcodeSet, mandatory, _IncorrectDataType, "'-2'", result, _InvalidArgumentError, errorcodeGet, writeOnly, lastValid, getResult);

   setString = "101";
   result = apiHandle.LMSSetValue(cmiElement,setString);
   errorcodeSet = apiHandle.LMSGetLastError();
   getResult = apiHandle.LMSGetValue(cmiElement);
   getResult = parseInt(getResult);
   errorcodeGet = apiHandle.LMSGetLastError();
   displayInfoAsWarning(cmiElement, errorcodeSet, mandatory, _IncorrectDataType, "'101'", result, _InvalidArgumentError, errorcodeGet, writeOnly, lastValid, getResult);

   setString = "32769";
   result = apiHandle.LMSSetValue(cmiElement,setString);
   errorcodeSet = apiHandle.LMSGetLastError();
   getResult = apiHandle.LMSGetValue(cmiElement);
   getResult = parseInt(getResult);
   errorcodeGet = apiHandle.LMSGetLastError();
   displayInfoAsWarning(cmiElement, errorcodeSet, mandatory, _IncorrectDataType, "'32769'", result, _InvalidArgumentError, errorcodeGet, writeOnly, lastValid, getResult);

   setString = "-32769";
   result = apiHandle.LMSSetValue(cmiElement,setString);
   errorcodeSet = apiHandle.LMSGetLastError();
   getResult = apiHandle.LMSGetValue(cmiElement);
   getResult = parseInt(getResult);
   errorcodeGet = apiHandle.LMSGetLastError();
   displayInfoAsWarning(cmiElement, errorcodeSet, mandatory, _IncorrectDataType, "'-32769'", result, _InvalidArgumentError, errorcodeGet, writeOnly, lastValid, getResult);

   setString = "50000";
   result = apiHandle.LMSSetValue(cmiElement,setString);
   errorcodeSet = apiHandle.LMSGetLastError();
   getResult = apiHandle.LMSGetValue(cmiElement);
   getResult = parseInt(getResult);
   errorcodeGet = apiHandle.LMSGetLastError();
   displayInfoAsWarning(cmiElement, errorcodeSet, mandatory, _IncorrectDataType, "'50000'", result, _InvalidArgumentError, errorcodeGet, writeOnly, lastValid, getResult);

   setString = "-50000";
   result = apiHandle.LMSSetValue(cmiElement,setString);
   errorcodeSet = apiHandle.LMSGetLastError();
   getResult = apiHandle.LMSGetValue(cmiElement);
   getResult = parseInt(getResult);
   errorcodeGet = apiHandle.LMSGetLastError();
   displayInfoAsWarning(cmiElement, errorcodeSet, mandatory, _IncorrectDataType, "'-50000'", result, _InvalidArgumentError, errorcodeGet, writeOnly, lastValid, getResult);

   setString = "";
   result = apiHandle.LMSSetValue(cmiElement,setString);
   errorcodeSet = apiHandle.LMSGetLastError();
   getResult = apiHandle.LMSGetValue(cmiElement);
   errorcodeGet = apiHandle.LMSGetLastError();
   displayInfoAsWarning(cmiElement, errorcodeSet, mandatory, _IncorrectDataType, "'Empty String'", result, _InvalidArgumentError, errorcodeGet, writeOnly, lastValid, getResult);

   setString = "Foo";
   result = apiHandle.LMSSetValue(cmiElement,setString);
   errorcodeSet = apiHandle.LMSGetLastError();
   getResult = apiHandle.LMSGetValue(cmiElement);
   errorcodeGet = apiHandle.LMSGetLastError();
   displayInfoAsWarning(cmiElement, errorcodeSet, mandatory, _IncorrectDataType, "'Foo'", result, _InvalidArgumentError, errorcodeGet, writeOnly, lastValid, getResult);
}
/*******************************************************************************
**
** Function checkAllPossibleCMISIntegerSpeed()
** Inputs:  cmiElement - Data Model Element name.
**          mandatory - True if a Mandatory element. False if Optional element.
**          writeOnly - True if Element is Write Only, otherwise false
** Return:  None
**
** Description:
** Currently called only for cmi.student_preference.speed.
** Calls apiHandle.LMSSetValue with various valid and invalid integer values for
** the  inputted Data Model element.  Checks the error status after each Set by
** calling apiHandle.LMSGetLastError.  It then calls displayInfo which will
** write to log the results and expected results of that call to
** apiHandle.LMSGetLastError.  This function is called for Data Model elements
** that are of type CMISInteger.
**
*******************************************************************************/
function  checkAllPossibleCMISIntegerSpeed(cmiElement, mandatory, writeOnly)
{
   var setString;
   var getResult;
   var lastValid;

   // Valid calls for type CMISInteger
   setString = "-100";
   result = apiHandle.LMSSetValue(cmiElement,setString);
   errorcodeSet = apiHandle.LMSGetLastError();
   getResult = apiHandle.LMSGetValue(cmiElement);
   getResult = parseInt(getResult); // Convert string into numeric equivalent
   errorcodeGet = apiHandle.LMSGetLastError();
   displayInfoNoError(cmiElement, errorcodeSet, mandatory, "'-100'", result, setString, getResult, true, errorcodeGet, writeOnly);

   setString = "0";
   result = apiHandle.LMSSetValue(cmiElement,setString);
   errorcodeSet = apiHandle.LMSGetLastError();
   getResult = apiHandle.LMSGetValue(cmiElement);
   getResult = parseInt(getResult);
   errorcodeGet = apiHandle.LMSGetLastError();
   displayInfoNoError(cmiElement, errorcodeSet, mandatory, "'0'", result, setString, getResult, true, errorcodeGet, writeOnly);

   setString = "100";
   result = apiHandle.LMSSetValue(cmiElement,setString);
   errorcodeSet = apiHandle.LMSGetLastError();
   //last valid set
   getResult = apiHandle.LMSGetValue(cmiElement);
   lastValid = getResult = parseInt(getResult);
   errorcodeGet = apiHandle.LMSGetLastError();
   displayInfoNoError(cmiElement, errorcodeSet, mandatory, "'100'", result, setString, getResult, true, errorcodeGet, writeOnly);

   // Invalid calls for type CMISInteger
   setString = "-101";
   result = apiHandle.LMSSetValue(cmiElement,setString);
   errorcodeSet = apiHandle.LMSGetLastError();
   getResult = apiHandle.LMSGetValue(cmiElement);
   getResult = parseInt(getResult);
   errorcodeGet = apiHandle.LMSGetLastError();
   displayInfoAsWarning(cmiElement, errorcodeSet, mandatory, _IncorrectDataType, "'-101'", result, _InvalidArgumentError, errorcodeGet, writeOnly, lastValid, getResult);

   setString = "101";
   result = apiHandle.LMSSetValue(cmiElement,setString);
   errorcodeSet = apiHandle.LMSGetLastError();
   getResult = apiHandle.LMSGetValue(cmiElement);
   getResult = parseInt(getResult);
   errorcodeGet = apiHandle.LMSGetLastError();
   displayInfoAsWarning(cmiElement, errorcodeSet, mandatory, _IncorrectDataType, "'101'", result, _InvalidArgumentError, errorcodeGet, writeOnly, lastValid, getResult);

   setString = "32769";
   result = apiHandle.LMSSetValue(cmiElement,setString);
   errorcodeSet = apiHandle.LMSGetLastError();
   getResult = apiHandle.LMSGetValue(cmiElement);
   getResult = parseInt(getResult);
   errorcodeGet = apiHandle.LMSGetLastError();
   displayInfoAsWarning(cmiElement, errorcodeSet, mandatory, _IncorrectDataType, "'32769'", result, _InvalidArgumentError, errorcodeGet, writeOnly, lastValid, getResult);

   setString = "-32769";
   result = apiHandle.LMSSetValue(cmiElement,setString);
   errorcodeSet = apiHandle.LMSGetLastError();
   getResult = apiHandle.LMSGetValue(cmiElement);
   getResult = parseInt(getResult);
   errorcodeGet = apiHandle.LMSGetLastError();
   displayInfoAsWarning(cmiElement, errorcodeSet, mandatory, _IncorrectDataType, "'-32769'", result, _InvalidArgumentError, errorcodeGet, writeOnly, lastValid, getResult);

   setString = "50000";
   result = apiHandle.LMSSetValue(cmiElement,setString);
   errorcodeSet = apiHandle.LMSGetLastError();
   getResult = apiHandle.LMSGetValue(cmiElement);
   getResult = parseInt(getResult);
   errorcodeGet = apiHandle.LMSGetLastError();
   displayInfoAsWarning(cmiElement, errorcodeSet, mandatory, _IncorrectDataType, "'50000'", result, _InvalidArgumentError, errorcodeGet, writeOnly, lastValid, getResult);

   setString = "-50000";
   result = apiHandle.LMSSetValue(cmiElement,setString);
   errorcodeSet = apiHandle.LMSGetLastError();
   getResult = apiHandle.LMSGetValue(cmiElement);
   getResult = parseInt(getResult);
   errorcodeGet = apiHandle.LMSGetLastError();
   displayInfoAsWarning(cmiElement, errorcodeSet, mandatory, _IncorrectDataType, "'-50000'", result, _InvalidArgumentError, errorcodeGet, writeOnly, lastValid, getResult);

   setString = "";
   result = apiHandle.LMSSetValue(cmiElement,setString);
   errorcodeSet = apiHandle.LMSGetLastError();
   getResult = apiHandle.LMSGetValue(cmiElement);
   errorcodeGet = apiHandle.LMSGetLastError();
   displayInfoAsWarning(cmiElement, errorcodeSet, mandatory, _IncorrectDataType, "'Empty String'", result, _InvalidArgumentError, errorcodeGet, writeOnly, lastValid, getResult);

   setString = "Foo";
   result = apiHandle.LMSSetValue(cmiElement,setString);
   errorcodeSet = apiHandle.LMSGetLastError();
   getResult = apiHandle.LMSGetValue(cmiElement);
   errorcodeGet = apiHandle.LMSGetLastError();
   displayInfoAsWarning(cmiElement, errorcodeSet, mandatory, _IncorrectDataType, "'Foo'", result, _InvalidArgumentError, errorcodeGet, writeOnly, lastValid, getResult);
}
/*******************************************************************************
**
** Function checkAllPossibleCMISIntegerText()
** Inputs:  cmiElement - Data Model Element name.
**          mandatory - True if a Mandatory element. False if Optional element.
**          writeOnly - True if Element is Write Only, otherwise false
** Return:  None
**
** Description:
** Currently called only for cmi.student_preference.text.
** Calls apiHandle.LMSSetValue with various valid and invalid integer values for
** the  inputted Data Model element.  Checks the error status after each Set by
** calling apiHandle.LMSGetLastError.  It then calls displayInfo which will
** write to log the results and expected results of that call to
** apiHandle.LMSGetLastError.  This function is called for Data Model elements
** that are of type CMISInteger.
**
*******************************************************************************/
function  checkAllPossibleCMISIntegerText(cmiElement, mandatory, writeOnly)
{
   var setString;
   var getResult;
   var lastValid;

   // Valid calls for type CMISInteger
   setString = "-1";
   result = apiHandle.LMSSetValue(cmiElement,setString);
   errorcodeSet = apiHandle.LMSGetLastError();
   getResult = apiHandle.LMSGetValue(cmiElement);
   getResult = parseInt(getResult); // Convert string into numeric equivalent
   errorcodeGet = apiHandle.LMSGetLastError();
   displayInfoNoError(cmiElement, errorcodeSet, mandatory, "'-1'", result, setString, getResult, true, errorcodeGet, writeOnly);

   setString = "0";
   result = apiHandle.LMSSetValue(cmiElement,setString);
   errorcodeSet = apiHandle.LMSGetLastError();
   getResult = apiHandle.LMSGetValue(cmiElement);
   getResult = parseInt(getResult);
   errorcodeGet = apiHandle.LMSGetLastError();
   displayInfoNoError(cmiElement, errorcodeSet, mandatory, "'0'", result, setString, getResult, true, errorcodeGet, writeOnly);

   setString = "1";
   result = apiHandle.LMSSetValue(cmiElement,setString);
   errorcodeSet = apiHandle.LMSGetLastError();
   //last valid set
   getResult = apiHandle.LMSGetValue(cmiElement);
   lastValid = getResult = parseInt(getResult);
   errorcodeGet = apiHandle.LMSGetLastError();
   displayInfoNoError(cmiElement, errorcodeSet, mandatory, "'1'", result, setString, getResult, true, errorcodeGet, writeOnly);

   // Invalid calls for type CMISInteger
   setString = "-2";
   result = apiHandle.LMSSetValue(cmiElement,setString);
   errorcodeSet = apiHandle.LMSGetLastError();
   getResult = apiHandle.LMSGetValue(cmiElement);
   getResult = parseInt(getResult);
   errorcodeGet = apiHandle.LMSGetLastError();
   displayInfoAsWarning(cmiElement, errorcodeSet, mandatory, _IncorrectDataType, "'-2'", result, _InvalidArgumentError, errorcodeGet, writeOnly, lastValid, getResult);

   setString = "2";
   result = apiHandle.LMSSetValue(cmiElement,setString);
   errorcodeSet = apiHandle.LMSGetLastError();
   getResult = apiHandle.LMSGetValue(cmiElement);
   getResult = parseInt(getResult);
   errorcodeGet = apiHandle.LMSGetLastError();
   displayInfoAsWarning(cmiElement, errorcodeSet, mandatory, _IncorrectDataType, "'2'", result, _InvalidArgumentError, errorcodeGet, writeOnly, lastValid, getResult);

   setString = "32769";
   result = apiHandle.LMSSetValue(cmiElement,setString);
   errorcodeSet = apiHandle.LMSGetLastError();
   getResult = apiHandle.LMSGetValue(cmiElement);
   getResult = parseInt(getResult);
   errorcodeGet = apiHandle.LMSGetLastError();
   displayInfoAsWarning(cmiElement, errorcodeSet, mandatory, _IncorrectDataType, "'32769'", result, _InvalidArgumentError, errorcodeGet, writeOnly, lastValid, getResult);

   setString = "-32769";
   result = apiHandle.LMSSetValue(cmiElement,setString);
   errorcodeSet = apiHandle.LMSGetLastError();
   getResult = apiHandle.LMSGetValue(cmiElement);
   getResult = parseInt(getResult);
   errorcodeGet = apiHandle.LMSGetLastError();
   displayInfoAsWarning(cmiElement, errorcodeSet, mandatory, _IncorrectDataType, "'-32769'", result, _InvalidArgumentError, errorcodeGet, writeOnly, lastValid, getResult);

   setString = "50000";
   result = apiHandle.LMSSetValue(cmiElement,setString);
   errorcodeSet = apiHandle.LMSGetLastError();
   getResult = apiHandle.LMSGetValue(cmiElement);
   getResult = parseInt(getResult);
   errorcodeGet = apiHandle.LMSGetLastError();
   displayInfoAsWarning(cmiElement, errorcodeSet, mandatory, _IncorrectDataType, "'50000'", result, _InvalidArgumentError, errorcodeGet, writeOnly, lastValid, getResult);

   setString = "-50000";
   result = apiHandle.LMSSetValue(cmiElement,setString);
   errorcodeSet = apiHandle.LMSGetLastError();
   getResult = apiHandle.LMSGetValue(cmiElement);
   getResult = parseInt(getResult);
   errorcodeGet = apiHandle.LMSGetLastError();
   displayInfoAsWarning(cmiElement, errorcodeSet, mandatory, _IncorrectDataType, "'-50000'", result, _InvalidArgumentError, errorcodeGet, writeOnly, lastValid, getResult);

   setString = "";
   result = apiHandle.LMSSetValue(cmiElement,setString);
   errorcodeSet = apiHandle.LMSGetLastError();
   getResult = apiHandle.LMSGetValue(cmiElement);
   errorcodeGet = apiHandle.LMSGetLastError();
   displayInfoAsWarning(cmiElement, errorcodeSet, mandatory, _IncorrectDataType, "'Empty String'", result, _InvalidArgumentError, errorcodeGet, writeOnly, lastValid, getResult);

   setString = "Foo";
   result = apiHandle.LMSSetValue(cmiElement,setString);
   errorcodeSet = apiHandle.LMSGetLastError();
   getResult = apiHandle.LMSGetValue(cmiElement);
   errorcodeGet = apiHandle.LMSGetLastError();
   displayInfoAsWarning(cmiElement, errorcodeSet, mandatory, _IncorrectDataType, "'Foo'", result, _InvalidArgumentError, errorcodeGet, writeOnly, lastValid, getResult);
}

/*******************************************************************************
**
** Function checkAllPossibleTypes()
** Inputs:  cmiElement - Data Model Element name.
**          mandatory - True if a Mandatory element. False if Optional element.
**          writeOnly - True if Element is Write Only, otherwise false
** Return:  None
**
** Description:
** Calls apiHandle.LMSSetValue with various valid and invalid Vocabulary strings
** for the inputted Data Model element.  Checks the error status after each Set
** by calling apiHandle.LMSGetLastError.  It then calls displayInfo which will
** write to log the results and expected results of that call to
** apiHandle.LMSGetLastError.  This function is called for Data Model elements
** that are of type CMIVocabulary and that have the following as their valid
** Vocabulary values: true-false, choice, fill-in, matching, performance,
** sequencing, likert, numeric.
**
*******************************************************************************/
function checkAllPossibleTypes(cmiElement, mandatory, writeOnly)
{
   var setString;
   var getResult;
   var lastValid;

   // Valid calls for type CMIVocabulary (Interaction)
   setString = "true-false";
   result = apiHandle.LMSSetValue(cmiElement,setString);
   errorcodeSet = apiHandle.LMSGetLastError();
   getResult = apiHandle.LMSGetValue(cmiElement);
   errorcodeGet = apiHandle.LMSGetLastError();
   displayInfoNoError(cmiElement, errorcodeSet, mandatory, "Valid CMIVocabulary: 'true-false'", result, setString, getResult, false, errorcodeGet, writeOnly);

   setString = "choice";
   result = apiHandle.LMSSetValue(cmiElement,setString);
   errorcodeSet = apiHandle.LMSGetLastError();
   getResult = apiHandle.LMSGetValue(cmiElement);
   errorcodeGet = apiHandle.LMSGetLastError();
   displayInfoNoError(cmiElement, errorcodeSet, mandatory, "Valid CMIVocabulary: 'choice'", result, setString, getResult, false, errorcodeGet, writeOnly);

   setString = "numeric";
   result = apiHandle.LMSSetValue(cmiElement,setString);
   errorcodeSet = apiHandle.LMSGetLastError();
   getResult = apiHandle.LMSGetValue(cmiElement);
   errorcodeGet = apiHandle.LMSGetLastError();
   displayInfoNoError(cmiElement, errorcodeSet, mandatory, "Valid CMIVocabulary: 'numeric'", result, setString, getResult, false, errorcodeGet, writeOnly);

   setString = "matching";
   result = apiHandle.LMSSetValue(cmiElement,setString);
   errorcodeSet = apiHandle.LMSGetLastError();
   getResult = apiHandle.LMSGetValue(cmiElement);
   errorcodeGet = apiHandle.LMSGetLastError();
   displayInfoNoError(cmiElement, errorcodeSet, mandatory, "Valid CMIVocabulary: 'matching'", result, setString, getResult, false, errorcodeGet, writeOnly);

   setString = "performance";
   result = apiHandle.LMSSetValue(cmiElement,setString);
   errorcodeSet = apiHandle.LMSGetLastError();
   getResult = apiHandle.LMSGetValue(cmiElement);
   errorcodeGet = apiHandle.LMSGetLastError();
   displayInfoNoError(cmiElement, errorcodeSet, mandatory, "Valid CMIVocabulary: 'performance'", result, setString, getResult, false, errorcodeGet, writeOnly);

   setString = "sequencing";
   result = apiHandle.LMSSetValue(cmiElement,setString);
   errorcodeSet = apiHandle.LMSGetLastError();
   getResult = apiHandle.LMSGetValue(cmiElement);
   errorcodeGet = apiHandle.LMSGetLastError();
   displayInfoNoError(cmiElement, errorcodeSet, mandatory, "Valid CMIVocabulary: 'sequencing'", result, setString, getResult, false, errorcodeGet, writeOnly);

   setString = "likert";
   result = apiHandle.LMSSetValue(cmiElement,setString);
   errorcodeSet = apiHandle.LMSGetLastError();
   getResult = apiHandle.LMSGetValue(cmiElement);
   errorcodeGet = apiHandle.LMSGetLastError();
   displayInfoNoError(cmiElement, errorcodeSet, mandatory, "Valid CMIVocabulary: 'likert'", result, setString, getResult, false, errorcodeGet, writeOnly);

   setString = "fill-in";
   result = apiHandle.LMSSetValue(cmiElement,setString);
   errorcodeSet = apiHandle.LMSGetLastError();
   //last valid set
   lastValid = getResult = apiHandle.LMSGetValue(cmiElement);
   errorcodeGet = apiHandle.LMSGetLastError();
   displayInfoNoError(cmiElement, errorcodeSet, mandatory, "Valid CMIVocabulary: 'fill-in'", result, setString, getResult, false, errorcodeGet, writeOnly);

   // Invalid calls for type CMIVocabulary (Interaction)
   setString = "TF";
   result = apiHandle.LMSSetValue(cmiElement,setString);
   errorcodeSet = apiHandle.LMSGetLastError();
   getResult = apiHandle.LMSGetValue(cmiElement);
   errorcodeGet = apiHandle.LMSGetLastError();
   displayInfoAsWarning(cmiElement, errorcodeSet, mandatory, _IncorrectDataType, "Invalid CMIVocabulary: 'TF'", result, _InvalidArgumentError, errorcodeGet, writeOnly, lastValid, getResult);

   setString = "status set to choice";
   result = apiHandle.LMSSetValue(cmiElement,setString);
   errorcodeSet = apiHandle.LMSGetLastError();
   getResult = apiHandle.LMSGetValue(cmiElement);
   errorcodeGet = apiHandle.LMSGetLastError();
   displayInfoAsWarning(cmiElement, errorcodeSet, mandatory, _IncorrectDataType, "Invalid CMIVocabulary: 'status set to choice'", result, _InvalidArgumentError, errorcodeGet, writeOnly, lastValid, getResult);

   setString = "";
   result = apiHandle.LMSSetValue(cmiElement,setString);
   errorcodeSet = apiHandle.LMSGetLastError();
   getResult = apiHandle.LMSGetValue(cmiElement);
   errorcodeGet = apiHandle.LMSGetLastError();
   displayInfoAsWarning(cmiElement, errorcodeSet, mandatory, _IncorrectDataType, "Invalid CMIVocabulary: ''(Empty String)", result, _InvalidArgumentError, errorcodeGet, writeOnly, lastValid, getResult);

   setString = "Numeric";
   result = apiHandle.LMSSetValue(cmiElement,setString);
   errorcodeSet = apiHandle.LMSGetLastError();
   getResult = apiHandle.LMSGetValue(cmiElement);
   errorcodeGet = apiHandle.LMSGetLastError();
   displayInfoAsWarning(cmiElement, errorcodeSet, mandatory, _IncorrectDataType, "Invalid CMIVocabulary: 'Numeric'", result, _InvalidArgumentError, errorcodeGet, writeOnly, lastValid, getResult);
}

/*******************************************************************************
**
** Function testMandatory()
** Inputs:  None
** Return:  None
**
** Description:
** Test all Data Model Elements that ARE mandatory.
**
*******************************************************************************/
function testMandatory()
{
   var result = "";
   var errorcodeSet = "";
   var setString;
   var getResult;
   var lastValid = "";

   // Should fail - not allowed to set the _children
   setString = "There are no children";
   result = apiHandle.LMSSetValue("cmi.core._children",setString);
   errorcodeSet = apiHandle.LMSGetLastError();
   getResult = apiHandle.LMSGetValue("cmi.core._children");
   errorcodeGet = apiHandle.LMSGetLastError();
   displayInfoForTypeChildren("cmi.core._children", errorcodeSet, true, _InvalidSetValue, "Called LMSSetValue", result, _InvalidArgumentError, _ElementIsReadOnly, errorcodeGet, false);

   // Should fail - not allowed to set the student_id
   setString = "SD001";
   result = apiHandle.LMSSetValue("cmi.core.student_id",setString);
   errorcodeSet = apiHandle.LMSGetLastError();
   getResult = apiHandle.LMSGetValue("cmi.core.student_id");
   errorcodeGet = apiHandle.LMSGetLastError();
   displayInfoAsWarning("cmi.core.student_id", errorcodeSet, true, _ElementIsReadOnly, "Called LMSSetValue", result, _InvalidArgumentError, errorcodeGet, false, lastValid, getResult);

   // Should fail - not allowed to set the student_name
   setString = "Maxwell Smart";
   result = apiHandle.LMSSetValue("cmi.core.student_name",setString);
   errorcodeSet = apiHandle.LMSGetLastError();
   getResult = apiHandle.LMSGetValue("cmi.core.student_name");
   errorcodeGet = apiHandle.LMSGetLastError();
   displayInfoAsWarning("cmi.core.student_name", errorcodeSet, true, _ElementIsReadOnly, "Called LMSSetValue", result, _InvalidArgumentError, errorcodeGet, false, lastValid, getResult);

   // Test cmi.core.lesson_location
   checkAllPossibleCMIString255("cmi.core.lesson_location", true, false);

   // Should fail - not allowed to set the credit
   setString = "credit";
   result = apiHandle.LMSSetValue("cmi.core.credit",setString);
   errorcodeSet = apiHandle.LMSGetLastError();
   getResult = apiHandle.LMSGetValue("cmi.core.credit");
   errorcodeGet = apiHandle.LMSGetLastError();
   displayInfoAsWarning("cmi.core.credit", errorcodeSet, true, _ElementIsReadOnly, "Called LMSSetValue", result, _InvalidArgumentError, errorcodeGet, false, lastValid, getResult);

   // Test the entire Status vocabulary for cmi.core.lesson_status
   checkAllPossibleStatuses("cmi.core.lesson_status", true, false, false);

   // Should fail - not allowed to set the entry
   setString = "ab-initio";
   result = apiHandle.LMSSetValue("cmi.core.entry",setString);
   errorcodeSet = apiHandle.LMSGetLastError();
   getResult = apiHandle.LMSGetValue("cmi.core.entry");
   errorcodeGet = apiHandle.LMSGetLastError();
   displayInfoAsWarning("cmi.core.entry", errorcodeSet, true, _ElementIsReadOnly, "Called LMSSetValue", result, _InvalidArgumentError, errorcodeGet, false, lastValid, getResult);

   // Should fail - not allowed to set the score._children
   setString = "Try setting core score children";
   result = apiHandle.LMSSetValue("cmi.core.score._children",setString);
   errorcodeSet = apiHandle.LMSGetLastError();
   getResult = apiHandle.LMSGetValue("cmi.core.score._children");
   errorcodeGet = apiHandle.LMSGetLastError();
   displayInfoForTypeChildren("cmi.core.score._children", errorcodeSet, true, _InvalidSetValue, "Called LMSSetValue", result, _InvalidArgumentError, _ElementIsReadOnly, errorcodeGet, false);

   // Test cmi.core.score.raw
   checkAllPossibleCMIDecimal("cmi.core.score.raw", true, true, true, false);

   // Should fail - not allowed to set total_time
   setString = "00:03:45.5";
   result = apiHandle.LMSSetValue("cmi.core.total_time",setString);
   errorcodeSet = apiHandle.LMSGetLastError();
   getResult = apiHandle.LMSGetValue("cmi.core.total_time");
   errorcodeGet = apiHandle.LMSGetLastError();
   displayInfoAsWarning("cmi.core.total_time", errorcodeSet, true, _ElementIsReadOnly, "Called LMSSetValue", result, _InvalidArgumentError, errorcodeGet, false, lastValid, getResult);

   // Test the entire Status vocabulary for cmi.core.exit
   checkAllPossibleExitStatuses("cmi.core.exit", true, true);

   // Test various Timespan possibilities
   checkAllPossibleTimespans("cmi.core.session_time", true, true);

   // Test cmi.suspend_data
   checkAllPossibleCMIString4096("cmi.suspend_data", true, false);

   // Should fail - not allowed to set cmi.launch_data
   setString = "Set Launch Data";
   result = apiHandle.LMSSetValue("cmi.launch_data",setString);
   errorcodeSet = apiHandle.LMSGetLastError();
   getResult = apiHandle.LMSGetValue("cmi.launch_data");
   errorcodeGet = apiHandle.LMSGetLastError();
   displayInfoAsWarning("cmi.launch_data", errorcodeSet, true, _ElementIsReadOnly, "Called LMSSetValue", result, _InvalidArgumentError, errorcodeGet, false, lastValid, getResult);
}

/*******************************************************************************
**
** Function testOptional()
** Inputs:  None
** Return:  None
**
** Description:
** Test all Data Model Elements that are NOT mandatory (i.e. they're Optional).
**
*******************************************************************************/
function testOptional()
{
   var result = "";
   var errorcodeSet = "";
   var setString;
   var getResult;
   var lastValid = "";

   // Test cmi.core.score.max
   checkAllPossibleCMIDecimal("cmi.core.score.max", false, true, true, false);

   // Test cmi.core.score.min
   checkAllPossibleCMIDecimal("cmi.core.score.min", false, true, true, false);

   // Should fail - not allowed to set lesson_mode
   setString = "normal";
   result = apiHandle.LMSSetValue("cmi.core.lesson_mode",setString);
   errorcodeSet = apiHandle.LMSGetLastError();
   getResult = apiHandle.LMSGetValue("cmi.core.lesson_mode");
   errorcodeGet = apiHandle.LMSGetLastError();
   displayInfoAsWarning("cmi.core.lesson_mode", errorcodeSet, false, _ElementIsReadOnly, "Called LMSSetValue", result, _InvalidArgumentError, errorcodeGet, false, lastValid, getResult);

   // Test cmi.comments
   checkAllPossibleComments4096("cmi.comments", false, false);

   // Should fail - not allowed to set cmi.comments_from_lms
   setString = "Set Comments from LMS";
   result = apiHandle.LMSSetValue("cmi.comments_from_lms",setString);
   errorcodeSet = apiHandle.LMSGetLastError();
   getResult = apiHandle.LMSGetValue("cmi.comments_from_lms");
   errorcodeGet = apiHandle.LMSGetLastError();
   displayInfoAsWarning("cmi.comments_from_lms", errorcodeSet, false, _ElementIsReadOnly, "Called LMSSetValue", result, _InvalidArgumentError, errorcodeGet, false, lastValid, getResult);

   // Should fail - not allowed to set cmi.objectives._children
   setString = "Set Objectives Children";
   result = apiHandle.LMSSetValue("cmi.objectives._children",setString);
   errorcodeSet = apiHandle.LMSGetLastError();
   getResult = apiHandle.LMSGetValue("cmi.objectives._children");
   errorcodeGet = apiHandle.LMSGetLastError();
   displayInfoForTypeChildren("cmi.objectives._children", errorcodeSet, false, _InvalidSetValue, "Called LMSSetValue", result, _InvalidArgumentError, _ElementIsReadOnly, errorcodeGet, false);

   // Should fail - not allowed to set cmi.objectives._count
   setString = "25";
   result = apiHandle.LMSSetValue("cmi.objectives._count",setString);
   errorcodeSet = apiHandle.LMSGetLastError();
   getResult = apiHandle.LMSGetValue("cmi.objectives._count");
   errorcodeGet = apiHandle.LMSGetLastError();
   displayInfoForTypeChildren("cmi.objectives._count", errorcodeSet, false, _InvalidSetValue, "Called LMSSetValue", result, _InvalidArgumentError, _ElementIsReadOnly, errorcodeGet, false);

   // Test cmi.objectives.n.id
   checkAllPossibleCMIIdentifier("cmi.objectives.0.id", false, true, false);
   checkAllPossibleCMIIdentifier("cmi.objectives.1.id", false, true, false);

   // Should fail - not allowed to set cmi.objectives.n.score._children
   setString = "Set Objectives 0 Score Children";
   result = apiHandle.LMSSetValue("cmi.objectives.0.score._children",setString);
   errorcodeSet = apiHandle.LMSGetLastError();
   getResult = apiHandle.LMSGetValue("cmi.objectives.0.score._children");
   errorcodeGet = apiHandle.LMSGetLastError();
   displayInfoForTypeChildren("cmi.objectives.0.score._children", errorcodeSet, false, _InvalidSetValue, "Called LMSSetValue", result, _InvalidArgumentError, _ElementIsReadOnly, errorcodeGet, false);
   setString = "Set Objectives 1 Score Children";
   result = apiHandle.LMSSetValue("cmi.objectives.1.score._children",setString);
   errorcodeSet = apiHandle.LMSGetLastError();
   getResult = apiHandle.LMSGetValue("cmi.objectives.1.score._children");
   errorcodeGet = apiHandle.LMSGetLastError();
   displayInfoForTypeChildren("cmi.objectives.1.score._children", errorcodeSet, false, _InvalidSetValue, "Called LMSSetValue", result, _InvalidArgumentError, _ElementIsReadOnly, errorcodeGet, false);

   // Test cmi.objectives.n.score.raw
   checkAllPossibleCMIDecimal("cmi.objectives.0.score.raw", false, true, true, false);
   checkAllPossibleCMIDecimal("cmi.objectives.1.score.raw", false, true, true, false);

   // Test cmi.objectives.n.score.max
   checkAllPossibleCMIDecimal("cmi.objectives.0.score.max", false, true, true, false);
   checkAllPossibleCMIDecimal("cmi.objectives.1.score.max", false, true, true, false);

   // Test cmi.objectives.n.score.min
   checkAllPossibleCMIDecimal("cmi.objectives.0.score.min", false, true, true, false);
   checkAllPossibleCMIDecimal("cmi.objectives.2.score.min", false, true, true, false);

   // Test the entire Status vocabulary for cmi.objectives.n.status
   checkAllPossibleStatuses("cmi.objectives.0.status", false, true, false);
   checkAllPossibleStatuses("cmi.objectives.1.status", false, true, false);

   // Should fail - not allowed to set cmi.student_data._children
   setString = "Set Student Data Children";
   result = apiHandle.LMSSetValue("cmi.student_data._children",setString);
   errorcodeSet = apiHandle.LMSGetLastError();
   getResult = apiHandle.LMSGetValue("cmi.student_data._children");
   errorcodeGet = apiHandle.LMSGetLastError();
   displayInfoForTypeChildren("cmi.student_data._children", errorcodeSet, false, _InvalidSetValue, "Called LMSSetValue", result, _InvalidArgumentError, _ElementIsReadOnly, errorcodeGet, false);

   // Should fail - not allowed to set cmi.student_data.mastery_score
   setString = "90.99";
   result = apiHandle.LMSSetValue("cmi.student_data.mastery_score",setString);
   errorcodeSet = apiHandle.LMSGetLastError();
   getResult = apiHandle.LMSGetValue("cmi.student_data.mastery_score");
   getResult = parseFloat(getResult); // Convert string into numeric equivalent
   errorcodeGet = apiHandle.LMSGetLastError();
   displayInfoAsWarning("cmi.student_data.mastery_score", errorcodeSet, false, _ElementIsReadOnly, "Called LMSSetValue", result, _InvalidArgumentError, errorcodeGet, false, lastValid, getResult);

   // Should fail - not allowed to set cmi.student_data.max_time_allowed
   setString = "1121:03:40";
   result = apiHandle.LMSSetValue("cmi.student_data.max_time_allowed",setString);
   errorcodeSet = apiHandle.LMSGetLastError();
   getResult = apiHandle.LMSGetValue("cmi.student_data.max_time_allowed");
   errorcodeGet = apiHandle.LMSGetLastError();
   displayInfoAsWarning("cmi.student_data.max_time_allowed", errorcodeSet, false, _ElementIsReadOnly, "Called LMSSetValue", result, _InvalidArgumentError, errorcodeGet, false, lastValid, getResult);

   // Should fail - not allowed to set cmi.student_data.time_limit_action
   setString = "exit,message";
   result = apiHandle.LMSSetValue("cmi.student_data.time_limit_action",setString);
   errorcodeSet = apiHandle.LMSGetLastError();
   getResult = apiHandle.LMSGetValue("cmi.student_data.time_limit_action");
   errorcodeGet = apiHandle.LMSGetLastError();
   displayInfoAsWarning("cmi.student_data.time_limit_action", errorcodeSet, false, _ElementIsReadOnly, "Called LMSSetValue", result, _InvalidArgumentError, errorcodeGet, false, lastValid, getResult);

   // Should fail - not allowed to set cmi.student_preference._children
   setString = "Set Student Preference Children";
   result = apiHandle.LMSSetValue("cmi.student_preference._children",setString);
   errorcodeSet = apiHandle.LMSGetLastError();
   getResult = apiHandle.LMSGetValue("cmi.student_preference._children");
   errorcodeGet = apiHandle.LMSGetLastError();
   displayInfoForTypeChildren("cmi.student_preference._children", errorcodeSet, false, _InvalidSetValue, "Called LMSSetValue", result, _InvalidArgumentError, _ElementIsReadOnly, errorcodeGet, false);

   // Test cmi.student_preference.audio
   checkAllPossibleCMISIntegerAudio("cmi.student_preference.audio",false, false);

   // Test cmi.student_preference.language
   checkAllPossibleCMIString255("cmi.student_preference.language", false, false);

   // Test cmi.student_preference.speed
   checkAllPossibleCMISIntegerSpeed("cmi.student_preference.speed",false, false);

   // Test cmi.student_preference.text
   checkAllPossibleCMISIntegerText("cmi.student_preference.text",false, false);

   // Should fail - not allowed to set cmi.interactions._children
   setString = "Set Interactions Children";
   result = apiHandle.LMSSetValue("cmi.interactions._children",setString);
   errorcodeSet = apiHandle.LMSGetLastError();
   getResult = apiHandle.LMSGetValue("cmi.interactions._children");
   errorcodeGet = apiHandle.LMSGetLastError();
   displayInfoForTypeChildren("cmi.interactions._children", errorcodeSet, false, _InvalidSetValue, "Called LMSSetValue", result, _InvalidArgumentError, _ElementIsReadOnly, errorcodeGet, false);

   // Should fail - not allowed to set cmi.interactions._count
   setString = "4";
   result = apiHandle.LMSSetValue("cmi.interactions._count",setString);
   errorcodeSet = apiHandle.LMSGetLastError();
   getResult = apiHandle.LMSGetValue("cmi.interactions._count");
   errorcodeGet = apiHandle.LMSGetLastError();
   displayInfoForTypeChildren("cmi.interactions._count", errorcodeSet, false, _InvalidSetValue, "Called LMSSetValue", result, _InvalidArgumentError, _ElementIsReadOnly, errorcodeGet, false);

   // Test cmi.interactions.n.id
   checkAllPossibleCMIIdentifier("cmi.interactions.0.id", false, false, true);
   checkAllPossibleCMIIdentifier("cmi.interactions.1.id", false, false, true);

   // Should fail - not allowed to set cmi.interactions.n.objectives._count
   setString = "4";
   result = apiHandle.LMSSetValue("cmi.interactions.0.objectives._count",setString);
   errorcodeSet = apiHandle.LMSGetLastError();
   getResult = apiHandle.LMSGetValue("cmi.interactions.0.objectives._count");
   errorcodeGet = apiHandle.LMSGetLastError();
   displayInfoForTypeChildren("cmi.interactions.0.objectives._count", errorcodeSet, false, _InvalidSetValue, "Called LMSSetValue", result, _InvalidArgumentError, _ElementIsReadOnly, errorcodeGet, false);
   setString = "4";
   result = apiHandle.LMSSetValue("cmi.interactions.1.objectives._count",setString);
   errorcodeSet = apiHandle.LMSGetLastError();
   getResult = apiHandle.LMSGetValue("cmi.interactions.1.objectives._count");
   errorcodeGet = apiHandle.LMSGetLastError();
   displayInfoForTypeChildren("cmi.interactions.1.objectives._count", errorcodeSet, false, _InvalidSetValue, "Called LMSSetValue", result, _InvalidArgumentError, _ElementIsReadOnly, errorcodeGet, false);

   // Test cmi.interactions.n.objectives.n.id
   checkAllPossibleCMIIdentifier("cmi.interactions.0.objectives.0.id", false, false, true);
   checkAllPossibleCMIIdentifier("cmi.interactions.1.objectives.0.id", false, false, true);

   // Test cmi.interactions.n.time
   checkAllPossibleTimes("cmi.interactions.0.time", false, true);
   checkAllPossibleTimes("cmi.interactions.2.time", false, true);

   // Test the entire Status vocabulary for cmi.interactions.n.type
   checkAllPossibleTypes("cmi.interactions.0.type", false, true);
   checkAllPossibleTypes("cmi.interactions.1.type", false, true);

   // Should fail - not allowed to set cmi.interactions.n.correct_responses._count
   setString = "4";
   result = apiHandle.LMSSetValue("cmi.interactions.0.correct_responses._count",setString);
   errorcodeSet = apiHandle.LMSGetLastError();
   getResult = apiHandle.LMSGetValue("cmi.interactions.0.correct_responses._count");
   errorcodeGet = apiHandle.LMSGetLastError();
   displayInfoForTypeChildren("cmi.interactions.0.correct_responses._count", errorcodeSet, false, _InvalidSetValue, "Called LMSSetValue", result, _InvalidArgumentError, _ElementIsReadOnly, errorcodeGet, false);
   setString = "4";
   result = apiHandle.LMSSetValue("cmi.interactions.1.correct_responses._count",setString);
   errorcodeSet = apiHandle.LMSGetLastError();
   getResult = apiHandle.LMSGetValue("cmi.interactions.1.correct_responses._count");
   errorcodeGet = apiHandle.LMSGetLastError();
   displayInfoForTypeChildren("cmi.interactions.1.correct_responses._count", errorcodeSet, false, _InvalidSetValue, "Called LMSSetValue", result, _InvalidArgumentError, _ElementIsReadOnly, errorcodeGet, false);

   // Test cmi.interactions.n.correct_responses.n.pattern
   // Should Pass
   setString = "This should work";
   result = apiHandle.LMSSetValue("cmi.interactions.0.correct_responses.0.pattern",setString);
   errorcodeSet = apiHandle.LMSGetLastError();
   lastValid = getResult = apiHandle.LMSGetValue("cmi.interactions.0.correct_responses.0.pattern");
   errorcodeGet = apiHandle.LMSGetLastError();
   displayInfoNoError("cmi.interactions.0.correct_responses.0.pattern", errorcodeSet, false, "Valid CMIFeedback", result, setString, getResult, false, errorcodeGet, true);
   // Should fail
   setString = "This should not work - not sequential";
   result = apiHandle.LMSSetValue("cmi.interactions.0.correct_responses.5.pattern",setString);
   errorcodeSet = apiHandle.LMSGetLastError();
   getResult = apiHandle.LMSGetValue("cmi.interactions.0.correct_responses.5.pattern");
   errorcodeGet = apiHandle.LMSGetLastError();
   //For this situation, only want a 201 or 401 error code.  401 error code will be handled in the called function.
   //Setting the argument Warning errorcode to 9999 as there is no other valid error code to check for.
   displayInfoAsWarning("cmi.interactions.0.correct_responses.5.pattern", errorcodeSet, false, _InvalidArgumentError, "Invalid CMIFeedback - not sequential", result, 9999, errorcodeGet, true, lastValid, getResult);

   // Test cmi.interactions.n.weighting
   checkAllPossibleCMIDecimal("cmi.interactions.0.weighting", false, false, false, true);
   checkAllPossibleCMIDecimal("cmi.interactions.1.weighting", false, false, false, true);

   // Test cmi.interactions.n.student_response
   // Should Pass
   setString = "This should work";
   result = apiHandle.LMSSetValue("cmi.interactions.0.student_response",setString);
   errorcodeSet = apiHandle.LMSGetLastError();
   lastValid = getResult = apiHandle.LMSGetValue("cmi.interactions.0.student_response");
   errorcodeGet = apiHandle.LMSGetLastError();
   displayInfoNoError("cmi.interactions.0.student_response", errorcodeSet, false, "Valid CMIFeedback", result, setString, getResult, false, errorcodeGet, true);
   // Should fail
   setString = "This should not work - not sequential";
   result = apiHandle.LMSSetValue("cmi.interactions.5.student_response",setString);
   errorcodeSet = apiHandle.LMSGetLastError();
   getResult = apiHandle.LMSGetValue("cmi.interactions.5.student_response");
   errorcodeGet = apiHandle.LMSGetLastError();
   //For this situation, only want a 201 or 401 error code.  401 error code will be handled in the called function.
   //Setting the argument Warning errorcode to 9999 as there is no other valid error code to check for.
   displayInfoAsWarning("cmi.interactions.5.student_response", errorcodeSet, false, _InvalidArgumentError, "Invalid CMIFeedback - not sequential", result, 9999, errorcodeGet, true, lastValid, getResult);

   // Test cmi.interactions.n.result
   checkAllPossibleResults("cmi.interactions.0.result", false, true);
   checkAllPossibleResults("cmi.interactions.2.result", false, true);

   // Test cmi.interactions.n.latency
   checkAllPossibleTimespans("cmi.interactions.0.latency", false, true);
   checkAllPossibleTimespans("cmi.interactions.2.latency", false, true);
}

/*******************************************************************************
**
** Function displayInfoNoError()
** Inputs:  cmiElement - Data Model Element name.
**          errorcodeSet - Error Code returned from call to
**                   apiHandle.LMSGetLastError() completed right after call to
**                   LMSSetValue.
**          mandatory - True if a Mandatory element. False if Optional element.
**          whatTested - Actual test completed.
**          result - Value returned from call to apiHandle.LMSSetValue.
**          setString - Value cmiElement was set too.
**          getresult - Value returned from call to apiHandle.LMSGetValue.
**          readAccess - Element allowed to perform LMSGetValue
**          errorcodeGet - Error Code returned from call to
**                   apiHandle.LMSGetLastError() completed right after call to
**                   LMSGetValue.
**          writeOnly - True if Element is Write Only, otherwise false
** Return:  None
**
** Description:
** Tests the errorcode received from the LMSGetValue (errorcodeGet) and if there
** is an error prints a failed message to the log file, unless the data model
** element is write only or if the element is an optional element and either a
** 401 or 201 error code has been received.
** Passes in cmiElement which is the name of the Data Model element.  Compares
** the value returned from the call to LMSSetValue (result) with the Error Code
** (errorcodeSet) value returned from the LMSGetLastError call.  If result
** equals true, errorcodeSet should be zero.  If result is false then
** errorcodeSet should be a non-zero value.  Then tests if the errorcodeSet
** equals _NoError.  If they are equal it then compares if the string set
** by LMSSetValue (setString) is equal to the value returned immediately after
** that set by a call to LMSGetValue (getResult), but only if cmiElement has
** Read access (otherwise an LMSGetValue is not allowed).  If they are equal it
** writes to the log that the LMSSetValue passed.  If they are not equal it
** writes to the log that LMSSetValue failed.  If errorcodeSet does not equal
** _NoError, it then tests to see if this is a manadatory element
** (mandatory).  If not mandatory (i.e. it's optional), it tests to see if the
** element returned a "Not Implemented Error".  If so, it passes that call with
** a Warning message, as the optional item has not been implemented.  If not
** optional, it writes a Failed message to the log file. If the element did not
** pass, it sets either allMandatory or allOptional to false, being dependent
** upon whether it is an optional or mandatory Data Model element.
**
*******************************************************************************/
function displayInfoNoError(cmiElement, errorcodeSet, mandatory, whatTested, result, setString, getResult, readAccess, errorcodeGet, writeOnly)
{
   var passed = 1;

   //Test error code received after the LMSGetValue, that was completed immediately after the LMSSetValue, for all items except those that are WRITE ONLY.
   //but do not fail if errorcode received is 401 or 201 with an optional element
   if (((errorcodeGet != _NoError) && (writeOnly == false))
       && (((errorcodeGet != _NotImplementedError) && (errorcodeGet != _InvalidArgumentError)) && (mandatory == false)))
   {
      writeLogEntry(_FAILED, "LMSGetValue("+cmiElement+") failed.  Condition Tested: "+whatTested+". Error code: &quot;"+errorcodeGet+"&quot;.");
      passed = 0;
   }
   //If error code returned is something other than Zero, AND is anything other than 404 or 201 AND the item is WRITE ONLY, send Failed message.
   //but do not fail if errorcode received is 401 or 201 with an optional element
   else if (((errorcodeGet != _NoError) && (((errorcodeGet != _ElementIsWriteOnly) && (errorcodeGet != _InvalidArgumentError)) && (writeOnly == true)))
            && (((errorcodeGet != _NotImplementedError) && (errorcodeGet != _InvalidArgumentError)) && (mandatory == false)))
   {
      writeLogEntry(_FAILED, "LMSGetValue("+cmiElement+") failed.  Condition Tested: "+whatTested+". Error code: &quot;"+errorcodeGet+"&quot;.");
      passed = 0;
   }

   //If valid result returned and Error Code equals Expected Error Code
   if (result == "true" && errorcodeSet == _NoError)
   {
      //If the string set with LMSSetValue does not equal string returned from LMSGetValue AND LMSGetValue allowed
      if ((setString != getResult) && (readAccess == true))
      {
         writeLogEntry(_FAILED, "LMSSetValue("+cmiElement+") failed.  Condition Tested: "+whatTested+". Expected error code: &quot;0&quot; Current error code: &quot;"+errorcodeSet+"&quot;. String set does not match string returned.");
         passed = 0;
      }
      else
      {
         writeLogEntry(_PASSED, "LMSSetValue("+cmiElement+") completed successfully.  Condition tested: "+whatTested+". Returned expected error code: &quot;"+errorcodeSet+"&quot;");
         if ( !mandatory )
         {
            someOptional = true;
         }
      }
   }
   //If Error Code does not equal Expected Error code
   else if (result == "false" && errorcodeSet != _NoError)
   {
      //If it's Optional and Not Implemented: allow this, but as a warning
      if ((mandatory == false) && (errorcodeSet == _NotImplementedError))
      {
         writeLogEntry(_WARNING, "LMSSetValue("+cmiElement+") returned &quot;401&quot;. Condition tested: "+whatTested);
         allOptional = false;
      }
      else if ((mandatory == false) && (errorcodeSet == _InvalidArgumentError))
      {
         writeLogEntry(_WARNING, "LMSSetValue("+cmiElement+") returned &quot;201&quot;. Condition tested: "+whatTested+". In the future, the use of error code &quot;201&quot; may be deprecated in this situation.");
         allOptional = false;
      }
      else
      {
         writeLogEntry(_FAILED, "LMSSetValue("+cmiElement+") failed.  Condition Tested: "+whatTested+". Expected error code: &quot;0&quot; Current error code: &quot;"+errorcodeSet+"&quot;");
         passed = 0;
      }
   }
   else
   {
      //Else there was a problem - sett Error flag
      writeLogEntry(_FAILED, "LMSSetValue("+cmiElement+") failed.  Condition Tested: "+whatTested+". Expected error code: &quot;0&quot; Current error code: &quot;"+errorcodeSet+"&quot; Result: "+result);
      passed = 0;
   }

   //If an error occurred
   if (passed != 1)
   {
      if (mandatory == true)
      {
         allMandatory = false;
      }
      else
      {
         allOptional = false;
      }
   }

   return;
}

/*******************************************************************************
**
** Function displayInfoAsWarning()
** Inputs:  cmiElement - Data Model Element name.
**          errorcodeSet - Error Code returned from call to
**                   apiHandle.LMSGetLastError() completed right after call to
**                   LMSSetValue.
**          mandatory - True if a Mandatory element. False if Optional element.
**          expectErrCode - Expected Error Code.
**          whatTested - Actual test completed.
**          result - Value returned from call to apiHandle.LMSSetValue.
**          warningErrCode - Second Possible Expected Error Code.
**          errorcodeGet - Error Code returned from call to
**                   apiHandle.LMSGetLastError() completed right after call to
**                   LMSGetValue.
**          writeOnly - True if Element is Write Only, otherwise false
**          lastValid - string containing the last valid SetValue (if there was
**                one).
** Return:  None
**
** Description:
** Test the last valid value set with LMSSetValue (lastValid) compared against
** the current value returned from LMSGetValue (getResult).  If they are not
** equal it prints a Failed message to the log file.  Tests the errorcode
** received from the LMSGetValue (errorcodeGet) and if there is an error prints
** a failed message to the log file, unless the data model element is write only
** or if the element is an optional element and either a 401 or 201 error code
** has been received.
** Passes in cmiElement which is the name of the Data Model element.  Compares
** the value returned from the call to LMSSetValue (result) with the Error Code
** (errorcodeSet) value returned from the LMSGetLastError call.  If result equals
** true, errorcodeSet should be zero.  If result is false then errorcodeSet should be
** a non-zero value.  Then tests if the errorcodeSet matches the expected error
** code (expectErrCode or warningErrCode).  If they are equal it writes to the
** log that the LMSSetValue: passed if errorcodeSet equals expectErrCode OR Warning
** if errorcodeSet equals warningErrCode as that error code may no longer used in
** that situation in future releases of the Test Suite. If errorcodeSet does not
** equal expectErrCode, or warningErrCode it then tests to see if this is a
** manadatory element (mandatory).  If not mandatory (i.e. it's optional), it
** tests to see if the element returned a "Not Implemented Error".  If so, it
** passes that call with a Warning message, as the optional item has not been
** implemented.  If not optional, it writes a Failed message to the log file. If
** the element did not pass, it sets either allMandatory or allOptional to
** false, being dependent upon whether it is an optional or mandatory Data Model
** element.
**
*******************************************************************************/
function displayInfoAsWarning(cmiElement, errorcodeSet, mandatory, expectErrCode, whatTested, result, warningErrCode, errorcodeGet, writeOnly, lastValid, getResult)
{
   var passed = 1;

   //Check if the last Valid LMSSetValue's result (lastValid) equals result from LMSGetValue (getResult)
   //but do not fail if errorcode received is 401 or 201 with an optional element
   //AND do not fail if the element is write only
   if (((lastValid != getResult) && (expectErrCode != _ElementIsReadOnly))
       && (((errorcodeGet != _NotImplementedError) && (errorcodeGet != _InvalidArgumentError)) && (mandatory == false))
       && (writeOnly != true))
   {
      writeLogEntry(_FAILED, "LMSGetValue("+cmiElement+") failed.  Condition Tested: "+whatTested+". GetValue error code: &quot;"+errorcodeGet+"&quot; SetValue error code: &quot;"+errorcodeSet+"&quot;. Last Valid LMSSetValue does not equal return from LMSGetValue.");
      passed = 0;
   }

   //Test error code received after the LMSGetValue, that was completed immediately after the LMSSetValue, for all items except those that are WRITE ONLY.
   //but do not fail if errorcode received is 401 or 201 with an optional element
   if (((errorcodeGet != _NoError) && (writeOnly == false))
       && (((errorcodeGet != _NotImplementedError) && (errorcodeGet != _InvalidArgumentError)) && (mandatory == false)))
   {
      writeLogEntry(_FAILED, "LMSGetValue("+cmiElement+") failed.  Condition Tested: "+whatTested+". Error code: &quot;"+errorcodeGet+"&quot;.");
      passed = 0;
   }
   //If error code returned is something other than Zero, AND is anything other than 404 or 201 AND the item is WRITE ONLY, send Failed message.
   //but do not fail if errorcode received is 401 or 201 with an optional element
   else if (((errorcodeGet != _NoError) && (((errorcodeGet != _ElementIsWriteOnly) && (errorcodeGet != _InvalidArgumentError)) && (writeOnly == true)))
            && (((errorcodeGet != _NotImplementedError) && (errorcodeGet != _InvalidArgumentError)) && (mandatory == false)))
   {
      writeLogEntry(_FAILED, "LMSGetValue("+cmiElement+") failed.  Condition Tested: "+whatTested+". Error code: &quot;"+errorcodeGet+"&quot;.");
      passed = 0;
   }

   //If valid result returned and Error Code equals Expected Error Code or the error code that will display a Warning
   if (((result == "true" && errorcodeSet == _NoError)  || (result == "false" && errorcodeSet != _NoError))
       && ((errorcodeSet == expectErrCode) || (errorcodeSet == warningErrCode)))
   {
      //Display a Warning if this error code returned
      if (errorcodeSet == warningErrCode)
      {
         writeLogEntry(_WARNING, "LMSSetValue("+cmiElement+") returned: &quot;"+warningErrCode+"&quot;. Condition tested: "+whatTested+". In the future, the use of error code "+warningErrCode+" may be deprecated in this situation." );
      }
      //ELSE we received the expected error code.
      else
      {
         writeLogEntry(_PASSED, "LMSSetValue("+cmiElement+") returned expected error code: &quot;"+errorcodeSet+"&quot;. Condition tested: "+whatTested);
      }
   }
   //If the error codes do not match
   else if (((result == "true" && errorcodeSet == _NoError)  || (result == "false" && errorcodeSet != _NoError))
             && ((errorcodeSet != expectErrCode) && (errorcodeSet != warningErrCode)))
   {
      //If it's Optional and Not Implemented: allow this, but as a warning
      if ((mandatory == false) && (errorcodeSet == _NotImplementedError))
      {
         writeLogEntry(_WARNING, "LMSSetValue("+cmiElement+") returned &quot;401&quot;. Condition tested: "+whatTested);
         allOptional = false;
      }
      else if ((mandatory == false) && (errorcodeSet == _InvalidArgumentError))
      {
         writeLogEntry(_WARNING, "LMSSetValue("+cmiElement+") returned &quot;201&quot;. Condition tested: "+whatTested+". In the future, the use of error code &quot;201&quot; may be deprecated in this situation.");
         allOptional = false;
      }
      else
      {
         writeLogEntry(_FAILED, "LMSSetValue("+cmiElement+") failed.  Condition Tested: "+whatTested+". Expected error code: "+expectErrCode+" Current error code: &quot;"+errorcodeSet+"&quot;");
         passed = 0;
      }
   }
   else
   {
      writeLogEntry(_FAILED, "LMSSetValue("+cmiElement+") failed.  Condition Tested: "+whatTested+". Expected error code: "+expectErrCode+" Current error code: &quot;"+errorcodeSet+"&quot; Result: "+result);
      passed = 0;
   }

   //If an error occurred
   if (passed != 1)
   {
      if (mandatory == true)
      {
         allMandatory = false;
      }
      else
      {
         allOptional = false;
      }
   }

   return;
}

/*******************************************************************************
**
** Function displayInfoForTypeChildren()
** Inputs:  cmiElement - Data Model Element name.
**          errorcodeSet - Error Code returned from call to
**                   apiHandle.LMSGetLastError() completed right after call to
**                   LMSSetValue.
**          errorcodeGet - Error Code returned from call to
**                   apiHandle.LMSGetLastError() completed right after call to
**                   LMSGetValue.
**          mandatory - True if a Mandatory element. False if Optional element.
**          expectErrCode - Expected Error Code.
**          whatTested - Actual test completed.
**          result - Value returned from call to apiHandle.LMSSetValue.
**          warningErrCode2 - Second possible Expected Error Code.
**          warningErrCode - Error Code that if received will display a warning.
**          writeOnly - True if Element is Write Only, otherwise false
** Return:  None
**
** Description:
** Same function as displayInfoAsWarning, except there are two error codes and
** a Warning Error Code.  Used for Data Model elements with a ._children,
** ._count or ._version extension.
**
*******************************************************************************/
function displayInfoForTypeChildren(cmiElement, errorcodeSet, mandatory, expectErrCode, whatTested, result, warningErrCode2, warningErrCode, errorcodeGet, writeOnly)
{
   var passed = 1;

   //Test error code received after the LMSGetValue, that was completed immediately after the LMSSetValue, for all items except those that are WRITE ONLY.
   //but do not fail if errorcode received is 401 or 201 with an optional element
   if (((errorcodeGet != _NoError) && (writeOnly == false))
       && (((errorcodeGet != _NotImplementedError) && (errorcodeGet != _InvalidArgumentError)) && (mandatory == false)))
   {
      writeLogEntry(_FAILED, "LMSGetValue("+cmiElement+") failed.  Condition Tested: "+whatTested+". Error code: &quot;"+errorcodeGet+"&quot;.");
      passed = 0;
   }
   //If error code returned is something other than Zero, AND is anything other than 404 or 201 AND the item is WRITE ONLY, send Failed message.
   //but do not fail if errorcode received is 401 or 201 with an optional element
   else if (((errorcodeGet != _NoError) && (((errorcodeGet != _ElementIsWriteOnly) && (errorcodeGet != _InvalidArgumentError)) && (writeOnly == true)))
            && (((errorcodeGet != _NotImplementedError) && (errorcodeGet != _InvalidArgumentError)) && (mandatory == false)))
   {
      writeLogEntry(_FAILED, "LMSGetValue("+cmiElement+") failed.  Condition Tested: "+whatTested+". Error code: &quot;"+errorcodeGet+"&quot;.");
      passed = 0;
   }

   //If valid result returned and Error Code equals Expected Error Code or the error code that will display a Warning
   if (((result == "true" && errorcodeSet == _NoError)  || (result == "false" && errorcodeSet != _NoError))
       && ((errorcodeSet == expectErrCode) || (errorcodeSet == warningErrCode2) || (errorcodeSet == warningErrCode)))
   {
      //Display a Warning if this error code returned
      if (errorcodeSet == warningErrCode)
      {
         writeLogEntry(_WARNING, "LMSSetValue("+cmiElement+") returned: &quot;"+warningErrCode+"&quot;. Condition tested: "+whatTested+". In the future, the use of error code "+warningErrCode+" may be deprecated in this situation." );
      }
      else if (errorcodeSet == warningErrCode2)
      {
         writeLogEntry(_WARNING, "LMSSetValue("+cmiElement+") returned: &quot;"+warningErrCode2+"&quot;. Condition tested: "+whatTested+". In the future, the use of error code "+warningErrCode2+" may be deprecated in this situation." );
      }
      //ELSE we received the expected error code.
      else
      {
         writeLogEntry(_PASSED, "LMSSetValue("+cmiElement+") returned expected error code: &quot;"+errorcodeSet+"&quot;.  Condition tested: "+whatTested);
      }
   }
   //If the error codes do not match
   else if (((result == "true" && errorcodeSet == _NoError)  || (result == "false" && errorcodeSet != _NoError))
             && ((errorcodeSet != expectErrCode) && (errorcodeSet != warningErrCode2) && (errorcodeSet != warningErrCode)))
   {
      //If it's Optional and Not Implemented: allow this, but as a warning
      if ((mandatory == false) && (errorcodeSet == _NotImplementedError))
      {
         writeLogEntry(_WARNING, "LMSSetValue("+cmiElement+") returned &quot;401&quot;. Condition tested: "+whatTested);
         allOptional = false;
      }
      else if ((mandatory == false) && (errorcodeSet == _InvalidArgumentError))
      {
         writeLogEntry(_WARNING, "LMSSetValue("+cmiElement+") returned &quot;201&quot;. Condition tested: "+whatTested+". In the future, the use of error code &quot;201&quot; may be deprecated in this situation.");
         allOptional = false;
      }
      else
      {
         writeLogEntry(_FAILED, "LMSSetValue("+cmiElement+") failed.  Condition Tested: "+whatTested+". Expected error code: "+expectErrCode+" Current error code: &quot;"+errorcodeSet+"&quot;");
         passed = 0;
      }
   }
   else
   {
      writeLogEntry(_FAILED, "LMSSetValue("+cmiElement+") failed.  Condition Tested: "+whatTested+". Expected error code: "+expectErrCode+" Current error code: &quot;"+errorcodeSet+"&quot; Result: "+result);
      passed = 0;
   }

   //If an error occurred
   if (passed != 1)
   {
      if (mandatory == true)
      {
         allMandatory = false;
      }
      else
      {
         allOptional = false;
      }
   }

   return;
}

</SCRIPT>
<title>ADL SCORM Version 1.2 LMS Run-Time Environment Test - Course I - SCO #08</title>
</head>
<body onload="loadThisPage();">

<object classid=clsid:8AD9C840-044E-11D1-b3e9-00805F499D93
codebase="http://java.sun.com/products/plugin/1.3/jinstall-13-win32.cab#Version=1,3,0,0"
height="1"  width="1" id=lmsRTEApplet>
<param name="name" value="lmsRTEApplet">
<param name="code" value="org/adl/testsuite/rte/lms/LMSRTEApplet.class">
<param name="type" value="application/x-java-applet;version=1.3">
<param name="mayscript" value="true">
<param name="scriptable" value="true">
<param name="archive" value="LMSTestCourse.jar">
</object>

<p align="left">
<font color="#353889" size="5">
ADL SCORM&reg; Version 1.2 LMS Run-Time Environment Test<br /><br />
ADL SCORM Test Course I - SCO #08 <br />
<br />
<br />
<br />
<div id=teststatus>
   <strong>Status:&nbsp;&nbsp;Testing in progress...</strong>
</font>
</div>
<br />
<hr color="#353889" />
<br />
<p>
Please view the ADL test suite log for detailed progress and status information
for this test.
</p>
<p>
This test may take several minutes to complete. Please be patient!
</p>
<p>
Depending upon the functionality of the LMS, this SCO may or may not be unloaded
automatically upon conclusion of the testing performed by the SCO. When the SCO
completes, the status above will change to "<strong><em>This SCO Test Completed.</em></strong>
".  If the LMS does NOT automatically sequence SCO's, then please navigate to
the next SCO manually when this status is displayed.
</p>
<p>
This Sharable Content Object (SCO) tests the Learning Management System for
conformance with the Runtime Environment Guidelines as described in the SCORM.
The purpose of this SCO is to test for Minimum and Maximum values for every Data
Model element.  Then call apiHandle.LMSGetLastError and see if that call returns the
expected error codition, if one exists.  Specifically, this SCO performs the
following:
</p>
<ol>
   <ol>
      <li>
         Validates that this SCO was launched in the appropriate sequence (eighth)
      <li>
         Locates the LMS's API Adapter implementation
      <li>
         Calls the LMSInitialize function
      <li>
         Tests for the Maximum and Minimum values of the Mandatory data model
         elements
      <li>
         Tests for the Maximum and Minimum values of the Optional data model
         elements
      <li>
         Calls the LMSCommit function
      <li>
         Calls the LMSFinish function
      </li>
   </ol>
</ol>
<br />
<hr color="#353889" />
</body>
</html>
